schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
"""A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt."""
scalar URL
"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime
"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON
"""A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier."""
scalar UUID
type User {
  """The settings Id of the user"""
  id: ID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  """The first name of the user"""
  firstName: String!
  """The last name of the user"""
  lastName: String!
  """The last name of the user"""
  country: UserCountry!
  intro: String
  """The display name of the user"""
  displayName: String!
  photo: String!
  """The email of the user"""
  email: String!
  """List of all the users permissions"""
  permissions: [String!]!
  """List of events, that occurred and are related to this user"""
  events(take: Int = 10, skip: Int = 0, orderBy: EventOrderByInput): [Event!]!
  proposals(take: Int = 10, skip: Int = 0, where: ProposalWhereInput): [Proposal!]!
  subscriptions: [CommonSubscription!]!
  notifications(orderBy: NotificationOrderByInput = {createdAt: desc}, cursor: NotificationWhereUniqueInput, take: Int = 10, skip: Int): [Notification!]!
  notificationTokens: [UserNotificationToken!]!
  discussionSubscriptions(take: Int = 10, skip: Int = 0, orderBy: DiscussionSubscriptionOrderByInput): [DiscussionSubscription!]!
}
type UserNotificationToken implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  state: UserNotificationTokenState!
  token: String!
  description: String!
  lastUsed: DateTime!
  lastVerified: DateTime!
}
input UserWhereUniqueInput {
  userId: ID!
}
input UserWhereInput {
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
}
input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  photo: String!
  country: UserCountry!
  intro: String
}
input CreateUserNotificationTokenInput {
  token: String!
  description: String!
}
enum UserNotificationTokenState {
  Active
  Expired
  Voided
}
enum UserCountry {
  Unknown
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CM
  CA
  CV
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  KR
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  SS
  ES
  LK
  SD
  SR
  SJ
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}
type Role implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  name: String!
  displayName: String!
  description: String!
  permissions: [String!]!
}
type Card {
  """The main identifier of the item"""
  id: ID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}
input CreateCardInput {
  """The ID of the key used for the encryption of the sensitive data"""
  keyId: String!
  """The sensitive part of the card as encrypted card"""
  encryptedData: String!
  expYear: Int!
  expMonth: Int!
  billingDetails: BillingDetailsInput!
}
type Vote {
  """The main identifier of the item"""
  id: ID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  outcome: VoteOutcome!
  voterId: ID!
  voter: CommonMember!
}
enum VoteOutcome {
  Approve
  Condemn
}
input CreateVoteInput {
  outcome: VoteOutcome!
  """The ID of the root of the proposal whether it is funding one or join"""
  proposalId: ID!
}
enum PaymentType {
  OneTimePayment
  SubscriptionInitialPayment
  SubscriptionSequentialPayment
  ImportedPayment
}
enum PaymentStatus {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}
enum PaymentCircleStatus {
  pending
  failed
  confirmed
  paid
}
type Payment implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  processed: Boolean!
  processedError: Boolean!
  type: PaymentType!
  status: PaymentStatus!
  circlePaymentStatus: PaymentCircleStatus
  circlePaymentId: String
  """The amount of the payment in US dollar cents"""
  amount: Int
  """The payment fees in US dollar cents"""
  fees: Int
  userId: String!
  user: User!
  commonId: String!
  common: Common!
}
input PaymentsWhereInput {
  commonId: UUID
  userId: UUID
}
type Event {
  """The main identifier of the item"""
  id: ID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  """The Types of the event in one of the predefined event types"""
  type: EventType!
  payload: JSON
  """The ID of the common, for whom the event was created"""
  commonId: ID
  """The ID of the event creator"""
  userId: ID
  """The event creator"""
  user: User
}
enum EventType {
  CommonCreated
  CommonDelisted
  CommonWhitelisted
  CommonMemberCreated
  CommonMemberRoleAdded
  CommonMemberRoleRemoved
  JoinRequestCreated
  JoinRequestAccepted
  JoinRequestRejected
  FundingRequestCreated
  FundingRequestAccepted
  FundingRequestRejected
  CardCreated
  CardCvvVerificationPassed
  CardCvvVerificationFailed
  PaymentCreated
  PaymentSucceeded
  PaymentFailed
  ProposalMajorityReached
  ProposalExpired
  VoteCreated
  UserCreated
  DiscussionCreated
  DiscussionMessageCreated
  DiscussionSubscriptionCreated
  DiscussionSubscriptionTypeChanged
  NotificationTemplateCreated
  NotificationTemplateUpdated
  UserNotificationTokenVoided
  UserNotificationTokenExpired
  UserNotificationTokenCreated
  UserNotificationTokenRefreshed
  ReportCreated
  ReportRespected
  ReportDismissed
  RoleCreated
  RoleUpdated
  RolePermissionAdded
  RolePermissionRemoved
  RoleDeleted
  UserAddedToRole
  UserRemovedFromRole
}
input EventOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  type: SortOrder
}
type Common {
  """The main identifier of the item"""
  id: ID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  """The name of the common as provided"""
  name: String!
  """The whitelisting state of a common"""
  whitelisted: Boolean!
  """The current available funds of the common. In cents"""
  balance: Int!
  """The total amount of money that the common has raised. In cents"""
  raised: Int!
  links: JSON
  rules: JSON
  image: String!
  description: String
  action: String
  byline: String
  fundingType: FundingType!
  """The minimum amount that the join request should provide. In cents"""
  fundingMinimumAmount: Int!
  """List of events, that occurred in a common"""
  events(take: Int = 10, skip: Int = 0, orderBy: EventOrderByInput): [Event!]!
  reports(where: ReportWhereInput = {status: {in: [Active]}}): [Report!]!
  proposals(paginate: PaginateInput, where: ProposalWhereInput): [Proposal!]!
  discussions(take: Int, skip: Int): [Discussion!]!
  members(take: Int, skip: Int, orderBy: CommonMemberOrderByInput): [CommonMember]!
  activeProposals: Int!
  activeFundingProposals: Int!
  activeJoinProposals: Int!
}
"""The funding Types of the common"""
enum FundingType {
  OneTime
  Monthly
}
input CreateCommonInput {
  name: String!
  fundingMinimumAmount: Int!
  fundingType: FundingType!
  image: String!
  description: String
  action: String
  byline: String
  links: [CommonLinkInput!]
  rules: [CommonLinkInput!]
}
input CommonWhereInput {
  name: StringFilter
}
input CommonWhereUniqueInput {
  id: ID!
}
input CommonLinkInput {
  title: String!
  url: String!
}
type Report implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  """The current status of the report"""
  status: ReportStatus!
  """The Types of violation that this report is for"""
  for: ReportFor!
  """The note that the report has left for the content"""
  note: String!
  """The date on which the report was last reviewed if reviewed"""
  reviewedOn: DateTime
  reporterId: ID!
  reporter: User!
  messageId: UUID!
  message: DiscussionMessage!
}
enum ReportFor {
  Nudity
  Violance
  Harassment
  FalseNews
  Spam
  Hate
  Other
}
enum ReportAction {
  Respected
  Dismissed
}
enum ReportStatus {
  Active
  Clossed
}
enum ReportAuditor {
  CommonModerator
  SystemAdmin
}
input ReportWhereInput {
  status: ReportStatusFilterInput
  for: ReportFor
}
input ReportStatusFilterInput {
  in: [ReportStatus]
  not: [ReportStatus]
}
input ActOnReportInput {
  reportId: UUID!
  action: ReportAction!
}
input ReportDiscussionMessageInput {
  messageId: UUID!
  note: String!
  for: ReportFor!
}
type Proposal {
  """The main identifier of the item"""
  id: ID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  type: ProposalType!
  state: ProposalState!
  links: JSON
  files: JSON
  images: JSON
  votesFor: Int!
  votesAgainst: Int!
  expiresAt: DateTime!
  title: String
  description: String
  """The IP from which the proposal was created"""
  ipAddress: String
  discussions(take: Int, skip: Int): [Discussion!]!
  """The ID of the user who created the proposal"""
  userId: ID!
  """The ID of the membership of the user who created the proposal"""
  commonMemberId: UUID!
  user: User!
  member: CommonMember!
  fundingId: UUID
  funding: FundingProposal
  commonId: UUID!
  common: Common!
  votes: [Vote!]!
  joinId: UUID
  join: JoinProposal
}
type JoinProposal implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  """The amount that this join proposal will contribute to the common. In cents"""
  funding: Int!
  fundingType: FundingType!
  paymentState: PaymentState!
}
type FundingProposal implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  """The amount that the proposal has requested in cents"""
  amount: Int!
  fundingState: FundingState!
}
input ProposalWhereInput {
  type: ProposalType
  state: ProposalState
  commonId: UUID
  commonMemberId: UUID
  userId: ID
}
input CreateJoinProposalInput {
  title: String!
  description: String!
  fundingAmount: Int!
  cardId: String!
  commonId: String!
  links: [LinkInput!]
}
input CreateFundingProposalInput {
  commonId: ID!
  amount: Int!
  title: String!
  description: String!
  links: [ProposalLinkInput!]
  files: [ProposalFileInput!]
  images: [ProposalImageInput!]
}
input ProposalLinkInput {
  title: String!
  url: String!
}
input ProposalFileInput {
  value: String!
}
input ProposalImageInput {
  value: String!
}
enum ProposalType {
  FundingRequest
  JoinRequest
}
enum ProposalState {
  Countdown
  Finalizing
  Rejected
  Accepted
}
enum FundingState {
  NotEligible
  Eligible
  AwaitingApproval
  Pending
  Completed
  Confirmed
}
enum PaymentState {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}
input ProposalWhereUniqueInput {
  id: UUID!
}
enum StatisticType {
  AllTime
  Hourly
  Daily
  Weekly
}
type Statistic implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  users: Int!
  commons: Int!
  fundingProposals: Int!
  joinProposals: Int!
}
input StatisticsWhereInput {
  type: StatisticType
}
type Discussion implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  """What this discussion is about"""
  topic: String!
  """Short description of the topic"""
  description: String!
  """The date at which the last message on the discussion was added"""
  latestMessage: DateTime!
  type: DiscussionType!
  userId: String!
  """The discussion creator"""
  owner: User
  messages(take: Int = 10, skip: Int = 0, orderBy: DiscussionMessagesOrderByInput = {createdAt: asc}): [DiscussionMessage!]!
}
type DiscussionMessage implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  message: String!
  type: DiscussionMessageType!
  flag: DiscussionMessageFlag!
  userId: String!
  reports: [Report!]!
  owner: User!
}
type DiscussionSubscription implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  type: DiscussionSubscriptionType!
  userId: String!
  discussionId: UUID!
  discussion: Discussion!
}
enum DiscussionType {
  ProposalDiscussion
  CommonDiscussion
}
enum DiscussionMessageType {
  Message
}
enum DiscussionMessageFlag {
  Clear
  Reported
  Hidden
}
enum DiscussionSubscriptionType {
  AllNotifications
  OnlyMentions
  NoNotification
}
input DiscussionMessagesOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}
input DiscussionSubscriptionOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}
input DiscussionWhereInput {
  commonId: UUID
  commonMemberId: UUID
  userId: ID
}
input CreateDiscussionInput {
  """The topic of the discussion to be created"""
  topic: String!
  """Short description about the topic"""
  description: String!
  """The ID of the common, for which we are creating the discussion"""
  commonId: ID!
  """The ID of the proposal, if this is proposal discussion"""
  proposalId: ID
}
input CreateDiscussionMessageInput {
  """The ID of the discussion, for which we are creating the message"""
  discussionId: ID!
  """The message itself"""
  message: String!
}
type CommonMember implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  userId: ID!
  commonId: ID!
  roles: [CommonMemberRole!]!
  user: User
  common: Common
  proposals(take: Int = 10, skip: Int = 0, where: ProposalWhereInput): [Proposal!]!
}
input CommonMemberOrderByInput {
  createdAt: SortOrder!
}
enum CommonMemberRole {
  Founder
  Moderator
}
enum NotificationType {
  JoinRequestAccepted
  JoinRequestRejected
  FundingRequestAccepted
  FundingRequestRejected
  General
}
enum NotificationSeenStatus {
  NotSeen
  Seen
  Done
}
enum NotificationLanguage {
  EN
  RU
  BG
  HE
  JP
  KO
}
enum NotificationTemplateType {
  PushNotification
  EmailNotification
}
type Notification implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  """Whether the notification should be shown in the user notification feed"""
  show: Boolean!
  type: NotificationType!
  seenStatus: NotificationSeenStatus!
  """The ID of the linked user"""
  userId: UUID!
  """The linked user. Expensive operation"""
  user: User!
  """The ID of the linked common. May be null"""
  commonId: UUID
  """The linked common. Expensive operation that may return null"""
  common: Common
  """The ID of the linked proposal. May be null"""
  proposalId: UUID
  """The linked proposal. Expensive operation that may return null"""
  proposal: Proposal
  """The ID of the linked discussion. May be null"""
  discussionId: UUID
  """The linked discussion. Expensive operation that may return null"""
  discussion: Discussion
}
type NotificationTemplate implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  forType: NotificationType!
  templateType: NotificationTemplateType!
  language: NotificationLanguage!
  subject: String!
  content: String!
  from: String
  fromName: String
  bcc: String
  bccName: String
}
type NotificationEventOptions {
  availableNotifications: [NotificationType!]!
  availableEvents: [EventType!]!
}
type NotificationEventSettings implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  active: Boolean!
  sendToEveryone: Boolean!
  sendToCommon: Boolean!
  sendToUser: Boolean!
  description: String!
  sendNotificationType: NotificationType!
  onEvent: EventType!
}
type NotificationSystemSettings implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  type: NotificationType!
  sendEmail: Boolean!
  sendPush: Boolean!
  showInUserFeed: Boolean!
}
type NotificationTemplateOptions {
  languages: [NotificationLanguage]!
  templateTypes: [NotificationTemplateType]!
  notificationTypes: [NotificationType]!
}
input NotificationWhereInput {
  seenStatus: NotificationSeenStatus
  type: NotificationType
  userId: ID
  commonId: UUID
  proposalId: UUID
  discussionId: UUID
}
input NotificationWhereUniqueInput {
  id: UUID
}
input NotificationTemplateWhereInput {
  language: NotificationLanguage
  forType: NotificationType
  type: NotificationTemplateType
}
input NotificationSettingsWhereInput {
  """The Types of the notification"""
  type: NotificationType
}
input NotificationOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  status: SortOrder
}
type CommonSubscription implements BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  paymentStatus: SubscriptionPaymentStatus!
  status: SubscriptionStatus!
  dueDate: DateTime!
  chargedAt: DateTime!
  voided: Boolean!
  amount: Int!
  common: Common!
}
enum SubscriptionPaymentStatus {
  AwaitingInitialPayment
  Pending
  Successful
  Unsuccessful
}
enum SubscriptionStatus {
  Pending
  Active
  PaymentFailed
  CanceledByUser
  CanceledByPaymentFailure
}
scalar Void
enum SortOrder {
  asc
  desc
}
type Link {
  """The display title of the link"""
  title: String!
  """The actual link part of the link"""
  url: String!
}
interface BaseEntity {
  """The main identifier of the item"""
  id: UUID!
  """The date, at which the item was created"""
  createdAt: DateTime!
  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}
input PaginateInput {
  take: Int!
  skip: Int
}
input LinkInput {
  """The display title of the link"""
  title: String!
  """The actual link part of the link"""
  url: String!
}
input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  in: [String!]
  notIn: [String!]
}
input BillingDetailsInput {
  name: String!
  city: String!
  country: String!
  line1: String!
  postalCode: String!
  line2: String
  district: String
}
input CreateRoleInput {
  name: String!
  displayName: String!
  description: String!
  permissions: [String!]!
}
input UpdateNotificationTemplateInput {
  id: String!
  subject: String
  content: String
  fromEmail: String
  fromName: String
  bcc: String
  bccName: String
}
input CreateNotificationEventSettingsInput {
  sendToEveryone: Boolean!
  sendToCommon: Boolean!
  sendToUser: Boolean!
  description: String!
  sendNotificationType: NotificationType!
  onEvent: EventType!
}
input UpdateNotificationSettingsInput {
  id: String!
  showInUserFeed: Boolean
  sendPush: Boolean
  sendEmail: Boolean
}
input CreateNotificationTemplateInput {
  forType: NotificationType!
  language: NotificationLanguage!
  templateType: NotificationTemplateType!
  subject: String!
  content: String!
  fromEmail: String
  fromName: String
}
type Query {
  """Provide ID to fetch specific user or do not pass anything to get the currently authenticated user"""
  user(where: UserWhereUniqueInput): User
  users(where: UserWhereInput, paginate: PaginateInput): [User]
  generateUserAuthToken(authId: String!): String!
  roles(paginate: PaginateInput): [Role]
  payment(id: ID): Payment
  payments(paginate: PaginateInput, where: PaymentsWhereInput): [Payment]
  events(paginate: PaginateInput): [Event]
  common(where: CommonWhereUniqueInput!): Common
  commons(paginate: PaginateInput, where: CommonWhereInput): [Common]
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(where: ProposalWhereInput, paginate: PaginateInput): [Proposal]
  getStatistics(where: StatisticsWhereInput): [Statistic]
  discussion(id: ID!): Discussion
  discussions(where: DiscussionWhereInput, paginate: PaginateInput): [Discussion]
  notificationTemplateOptions: NotificationTemplateOptions
  notificationEventOptions: NotificationEventOptions
  notificationEventSettings(paginate: PaginateInput!): [NotificationEventSettings]
  notificationTemplates(where: NotificationTemplateWhereInput, paginate: PaginateInput): [NotificationTemplate]
  notificationSettings(where: NotificationSettingsWhereInput): [NotificationSystemSettings]
  """List of all notifications, readable only by the admin"""
  notifications(paginate: PaginateInput!): [Notification]
}
type Mutation {
  """Creates new user in the settings"""
  createUser(input: CreateUserInput!): User!
  createUserNotificationToken(input: CreateUserNotificationTokenInput!): UserNotificationToken!
  voidUserNotificationToken(tokenId: ID!): UserNotificationToken!
  createRole(input: CreateRoleInput!): Role
  assignRole(userId: ID!, roleId: ID!): Void
  unassignRole(userId: ID!, roleId: ID!): Void
  createCard(input: CreateCardInput!): Card!
  createVote(input: CreateVoteInput!): Vote!
  createCommon(input: CreateCommonInput!): Common!
  delistCommon(commonId: String!): Boolean
  whitelistCommon(commonId: String!): Boolean
  actOnReport(input: ActOnReportInput!): Report
  reportDiscussionMessage(input: ReportDiscussionMessageInput!): Report!
  finalizeProposal(proposalId: ID!): Boolean!
  """Create new proposal of Types JOIN."""
  createJoinProposal(input: CreateJoinProposalInput!): Proposal!
  createFundingProposal(input: CreateFundingProposalInput!): Proposal!
  createDiscussion(input: CreateDiscussionInput!): Discussion!
  createDiscussionMessage(input: CreateDiscussionMessageInput!): DiscussionMessage!
  changeDiscussionSubscriptionType(
    """The ID of the discussion subscription to change"""
    id: ID!
    """The new subscription Types"""
    type: DiscussionSubscriptionType!
  ): DiscussionSubscription
  updateNotificationTemplate(input: UpdateNotificationTemplateInput!): NotificationTemplate
  createNotificationEventSettings(input: CreateNotificationEventSettingsInput!): NotificationEventSettings
  updateNotificationSettings(input: UpdateNotificationSettingsInput!): NotificationSystemSettings
  createNotificationTemplate(input: CreateNotificationTemplateInput!): NotificationTemplate
}
type Subscription {
  onProposalChange(
    """The ID of the proposal that you wish to subscribe to"""
    proposalId: ID!
  ): Proposal
  discussionMessageCreated(
    """The ID of the discussion, for which messages you want to subscribe"""
    discussionId: ID!
  ): DiscussionMessage
  notificationCreated: Notification
}