schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

input ActOnReportInput {
  reportId: UUID!
  action: ReportAction!
}

interface Address {
  line1: String
  line2: String
  city: String!
  country: String!
  postalCode: String!
  district: String
}

interface BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BillingDetailsInput {
  name: String!
  city: String!
  country: String!
  line1: String!
  postalCode: String!
  line2: String
  district: String
}

type Card {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Common {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  whitelisted: Boolean!
  balance: Int!
  raised: Int!
  links: JSON
  rules: JSON
  image: String!
  description: String
  action: String
  byline: String
  fundingType: FundingType!
  fundingMinimumAmount: Int!
  events(take: Int = 10, skip: Int = 0, orderBy: EventOrderByInput): [Event!]!
  reports(where: ReportWhereInput = {status: {in: [Active]}}): [Report!]!
  updates: [CommonUpdate!]!
  proposals(paginate: PaginateInput, where: ProposalWhereInput): [Proposal!]!
  discussions(take: Int, skip: Int): [Discussion!]!
  members(take: Int, skip: Int, orderBy: CommonMemberOrderByInput): [CommonMember]!
  activeProposals: Int!
  activeFundingProposals: Int!
  activeJoinProposals: Int!
}

input CommonLinkInput {
  title: String!
  url: String!
}

type CommonMember implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
  commonId: ID!
  roles: [CommonMemberRole!]!
  user: User
  common: Common
  proposals(take: Int = 10, skip: Int = 0, where: ProposalWhereInput): [Proposal!]!
}

input CommonMemberOrderByInput {
  createdAt: SortOrder!
}

enum CommonMemberRole {
  Founder
  Moderator
}

input CommonRuleInput {
  title: String!
  description: String
}

type CommonSubscription implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  paymentStatus: SubscriptionPaymentStatus!
  status: SubscriptionStatus!
  dueDate: DateTime!
  chargedAt: DateTime!
  voided: Boolean!
  amount: Int!
  common: Common!
}

type CommonUpdate implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  commonBefore: Common!
  commonAfter: Common!
  change: JSON
}

input CommonWhereInput {
  name: StringFilter
  id: StringFilter
}

input CommonWhereUniqueInput {
  id: ID!
}

enum Country {
  Unknown
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CM
  CA
  CV
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  KR
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  SS
  ES
  LK
  SD
  SR
  SJ
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

input CreateCardInput {
  keyId: String!
  encryptedData: String!
  expYear: Int!
  expMonth: Int!
  billingDetails: BillingDetailsInput!
}

input CreateCommonInput {
  name: String!
  fundingMinimumAmount: Int!
  fundingType: FundingType!
  action: String
  byline: String
  description: String
  image: String!
  links: [CommonLinkInput!]
  rules: [CommonRuleInput!]
}

input CreateDiscussionInput {
  topic: String!
  description: String!
  commonId: ID!
  proposalId: ID
}

input CreateDiscussionMessageInput {
  discussionId: ID!
  message: String!
}

input CreateFundingProposalInput {
  commonId: ID!
  amount: Int!
  title: String!
  description: String!
  links: [ProposalLinkInput!]
  files: [ProposalFileInput!]
  images: [ProposalImageInput!]
}

input CreateJoinProposalInput {
  title: String!
  description: String!
  fundingAmount: Int!
  cardId: String!
  commonId: String!
  links: [LinkInput!]
}

input CreateNotificationEventSettingsInput {
  sendToEveryone: Boolean!
  sendToCommon: Boolean!
  sendToUser: Boolean!
  description: String!
  sendNotificationType: NotificationType!
  onEvent: EventType!
}

input CreateNotificationTemplateInput {
  forType: NotificationType!
  language: NotificationLanguage!
  templateType: NotificationTemplateType!
  subject: String!
  content: String!
  fromEmail: String
  fromName: String
}

input CreatePayoutInput {
  wireId: ID!
  proposalIds: [ID!]!
  description: String
}

input CreateRoleInput {
  name: String!
  displayName: String!
  description: String!
  permissions: [String!]!
}

input CreateUserBillingDetailsInput {
  name: String!
  line2: String
  line1: String!
  district: String
  city: String!
  postalCode: String!
  country: Country!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  photo: String!
  country: Country!
  intro: String
}

input CreateUserNotificationTokenInput {
  token: String!
  description: String!
}

input CreateVoteInput {
  outcome: VoteOutcome!
  proposalId: ID!
}

input CreateWireBankAccountInput {
  bankName: String!
  line1: String
  line2: String
  district: String
  city: String!
  postalCode: String!
  country: Country!
}

input CreateWireInput {
  iban: String
  accountNumber: String
  routingNumber: String
  userId: String!
  billingDetailsId: String
  createBillingDetails: CreateUserBillingDetailsInput
  wireBankDetailsId: String
  createWireBankDetails: CreateWireBankAccountInput
}

scalar DateTime

type Discussion implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  topic: String!
  description: String!
  latestMessage: DateTime!
  type: DiscussionType!
  userId: String!
  owner: User
  messages(take: Int = 10, skip: Int = 0, orderBy: DiscussionMessagesOrderByInput = {createdAt: asc}): [DiscussionMessage!]!
}

type DiscussionMessage implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String!
  type: DiscussionMessageType!
  flag: DiscussionMessageFlag!
  userId: String!
  reports: [Report!]!
  owner: User!
}

enum DiscussionMessageFlag {
  Clear
  Reported
  Hidden
}

input DiscussionMessagesOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum DiscussionMessageType {
  Message
}

type DiscussionSubscription implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: DiscussionSubscriptionType!
  userId: String!
  discussionId: UUID!
  discussion: Discussion!
}

input DiscussionSubscriptionOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum DiscussionSubscriptionType {
  AllNotifications
  OnlyMentions
  NoNotification
}

enum DiscussionType {
  ProposalDiscussion
  CommonDiscussion
}

input DiscussionWhereInput {
  commonId: UUID
  commonMemberId: UUID
  userId: ID
}

type Event {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: EventType!
  payload: JSON
  commonId: ID
  userId: ID
  user: User
}

input EventOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  type: SortOrder
}

enum EventType {
  CommonCreated
  CommonUpdated
  CommonDelisted
  CommonWhitelisted
  CommonMemberCreated
  CommonMemberRoleAdded
  CommonMemberRoleRemoved
  JoinRequestCreated
  JoinRequestAccepted
  JoinRequestRejected
  FundingRequestCreated
  FundingRequestAccepted
  FundingRequestRejected
  CardCreated
  CardCvvVerificationPassed
  CardCvvVerificationFailed
  PaymentCreated
  PaymentSucceeded
  PaymentFailed
  ProposalMajorityReached
  ProposalExpired
  VoteCreated
  UserCreated
  UserUpdated
  DiscussionCreated
  DiscussionMessageCreated
  DiscussionSubscriptionCreated
  DiscussionSubscriptionTypeChanged
  NotificationTemplateCreated
  NotificationTemplateUpdated
  UserNotificationTokenVoided
  UserNotificationTokenExpired
  UserNotificationTokenCreated
  UserNotificationTokenRefreshed
  ReportCreated
  ReportRespected
  ReportDismissed
  RoleCreated
  RoleUpdated
  RolePermissionAdded
  RolePermissionRemoved
  RoleDeleted
  UserAddedToRole
  UserRemovedFromRole
  WireCreated
  WireUpdated
  PayoutCreated
  PayoutApprovalGiven
  PayoutRejectionGiven
  PayoutApproved
  PayoutRejected
  PayoutExecuted
  PayoutCompleted
}

type FundingProposal implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  amount: Int!
  fundingState: FundingState!
}

input FundingProposalWhereInput {
  fundingState: FundingState
}

enum FundingState {
  NotEligible
  Eligible
  Redeemed
}

enum FundingType {
  OneTime
  Monthly
}

type JoinProposal implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  funding: Int!
  fundingType: FundingType!
  paymentState: PaymentState!
}

scalar JSON

type Link {
  title: String!
  url: String!
}

input LinkInput {
  title: String!
  url: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  createUserBillingDetails(input: CreateUserBillingDetailsInput!): UserBillingDetails
  voidUserNotificationToken(tokenId: ID!): UserNotificationToken!
  createUserNotificationToken(input: CreateUserNotificationTokenInput!): UserNotificationToken!
  updateUser(input: UpdateUserInput!): User
  createWire(input: CreateWireInput!): Wire
  createWireBankAccount(input: CreateWireBankAccountInput!): WireBankAccount
  createRole(input: CreateRoleInput!): Role
  assignRole(userId: ID!, roleId: ID!): Void
  unassignRole(userId: ID!, roleId: ID!): Void
  createCard(input: CreateCardInput!): Card!
  createVote(input: CreateVoteInput!): Vote!
  createCommon(input: CreateCommonInput!): Common!
  updateCommon(input: UpdateCommonInput!): Common
  delistCommon(commonId: String!): Boolean
  whitelistCommon(commonId: String!): Boolean
  actOnReport(input: ActOnReportInput!): Report
  reportDiscussionMessage(input: ReportDiscussionMessageInput!): Report!
  createPayout(input: CreatePayoutInput!): Payout
  approvePayout(payoutId: ID!, outcome: PayoutApproverResponse!): PayoutApprover
  finalizeProposal(proposalId: ID!): Boolean!
  createJoinProposal(input: CreateJoinProposalInput!): Proposal!
  createFundingProposal(input: CreateFundingProposalInput!): Proposal!
  createDiscussion(input: CreateDiscussionInput!): Discussion!
  createDiscussionMessage(input: CreateDiscussionMessageInput!): DiscussionMessage!
  changeDiscussionSubscriptionType(id: ID!, type: DiscussionSubscriptionType!): DiscussionSubscription
  updateNotificationTemplate(input: UpdateNotificationTemplateInput!): NotificationTemplate
  createNotificationEventSettings(input: CreateNotificationEventSettingsInput!): NotificationEventSettings
  updateNotificationSettings(input: UpdateNotificationSettingsInput!): NotificationSystemSettings
  createNotificationTemplate(input: CreateNotificationTemplateInput!): NotificationTemplate
}

type Notification implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  show: Boolean!
  type: NotificationType!
  seenStatus: NotificationSeenStatus!
  userId: UUID!
  user: User!
  commonId: UUID
  common: Common
  proposalId: UUID
  proposal: Proposal
  discussionId: UUID
  discussion: Discussion
}

type NotificationEventOptions {
  availableNotifications: [NotificationType!]!
  availableEvents: [EventType!]!
}

type NotificationEventSettings implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  active: Boolean!
  sendToEveryone: Boolean!
  sendToCommon: Boolean!
  sendToUser: Boolean!
  description: String!
  sendNotificationType: NotificationType!
  onEvent: EventType!
}

enum NotificationLanguage {
  EN
  RU
  BG
  HE
  JP
  KO
}

input NotificationOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  status: SortOrder
}

enum NotificationSeenStatus {
  NotSeen
  Seen
  Done
}

input NotificationSettingsWhereInput {
  type: NotificationType
}

type NotificationSystemSettings implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: NotificationType!
  sendEmail: Boolean!
  sendPush: Boolean!
  showInUserFeed: Boolean!
}

type NotificationTemplate implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  forType: NotificationType!
  templateType: NotificationTemplateType!
  language: NotificationLanguage!
  subject: String!
  content: String!
  from: String
  fromName: String
  bcc: String
  bccName: String
}

type NotificationTemplateOptions {
  languages: [NotificationLanguage]!
  templateTypes: [NotificationTemplateType]!
  notificationTypes: [NotificationType]!
}

enum NotificationTemplateType {
  PushNotification
  EmailNotification
}

input NotificationTemplateWhereInput {
  language: NotificationLanguage
  forType: NotificationType
  type: NotificationTemplateType
}

enum NotificationType {
  JoinRequestAccepted
  JoinRequestRejected
  FundingRequestAccepted
  FundingRequestRejected
  General
}

input NotificationWhereInput {
  seenStatus: NotificationSeenStatus
  type: NotificationType
  userId: ID
  commonId: UUID
  proposalId: UUID
  discussionId: UUID
}

input NotificationWhereUniqueInput {
  id: UUID
}

input PaginateInput {
  take: Int!
  skip: Int = 0
}

type Payment implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  processed: Boolean!
  processedError: Boolean!
  type: PaymentType!
  status: PaymentStatus!
  circlePaymentStatus: PaymentCircleStatus
  circlePaymentId: String
  amount: Int
  fees: Int
  userId: String!
  user: User!
  commonId: String!
  common: Common!
}

enum PaymentCircleStatus {
  pending
  failed
  confirmed
  paid
}

input PaymentsWhereInput {
  commonId: UUID
  userId: UUID
}

enum PaymentState {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}

enum PaymentStatus {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}

enum PaymentType {
  OneTimePayment
  SubscriptionInitialPayment
  SubscriptionSequentialPayment
  ImportedPayment
}

type Payout implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: PayoutStatus!
  amount: Int!
  description: String!
  proposals: [Proposal!]!
}

type PayoutApprover implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  outcome: PayoutApproverResponse!
  userId: ID!
}

enum PayoutApproverResponse {
  Pending
  Approved
  Declined
}

enum PayoutStatus {
  PendingApproval
  CirclePending
  CircleComplete
  CircleFailed
  Failed
}

input PayoutStatusFilter {
  in: [PayoutStatus]
  notIn: [PayoutStatus]
  equals: PayoutStatus
  not: PayoutStatus
}

input PayoutWhereInput {
  status: PayoutStatusFilter
}

type Proposal {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ProposalType!
  state: ProposalState!
  links: JSON
  files: JSON
  images: JSON
  votesFor: Int!
  votesAgainst: Int!
  expiresAt: DateTime!
  title: String
  description: String
  ipAddress: String
  discussions(take: Int, skip: Int): [Discussion!]!
  userId: ID!
  commonMemberId: UUID!
  user: User!
  member: CommonMember!
  fundingId: UUID
  funding: FundingProposal
  commonId: UUID!
  common: Common!
  votes: [Vote!]!
  joinId: UUID
  join: JoinProposal
}

input ProposalFileInput {
  value: String!
}

input ProposalImageInput {
  value: String!
}

input ProposalLinkInput {
  title: String!
  url: String!
}

enum ProposalState {
  Countdown
  Finalizing
  Rejected
  Accepted
}

enum ProposalType {
  FundingRequest
  JoinRequest
}

input ProposalWhereInput {
  id: StringFilter
  type: ProposalType
  state: ProposalState
  commonId: UUID
  commonMemberId: UUID
  userId: ID
  title: StringFilter
  description: StringFilter
  AND: [ProposalWhereInput!]
  OR: [ProposalWhereInput!]
}

input ProposalWhereUniqueInput {
  id: UUID!
}

type Query {
  user(where: UserWhereUniqueInput): User
  users(where: UserWhereInput, paginate: PaginateInput): [User]
  generateUserAuthToken(authId: String!): String!
  wires(where: WireWhereInput): [Wire]
  role(where: RoleWhereUniqueInput!): Role
  roles(paginate: PaginateInput): [Role]
  events(paginate: PaginateInput): [Event]
  common(where: CommonWhereUniqueInput!): Common
  commons(paginate: PaginateInput, where: CommonWhereInput): [Common]
  payout(id: ID!): Payout
  payouts(paginate: PaginateInput, where: PayoutWhereInput): [Payout]
  payment(id: ID): Payment
  payments(paginate: PaginateInput, where: PaymentsWhereInput): [Payment]
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(where: ProposalWhereInput, fundingWhere: FundingProposalWhereInput, paginate: PaginateInput): [Proposal]
  settings: Settings!
  getStatistics(where: StatisticsWhereInput): [Statistic]
  discussion(id: ID!): Discussion
  discussions(where: DiscussionWhereInput, paginate: PaginateInput): [Discussion]
  notificationTemplateOptions: NotificationTemplateOptions
  notificationEventOptions: NotificationEventOptions
  notificationEventSettings(paginate: PaginateInput!): [NotificationEventSettings]
  notificationTemplates(where: NotificationTemplateWhereInput, paginate: PaginateInput): [NotificationTemplate]
  notificationSettings(where: NotificationSettingsWhereInput): [NotificationSystemSettings]
  notifications(paginate: PaginateInput!): [Notification]
}

type Report implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: ReportStatus!
  for: ReportFor!
  note: String!
  reviewedOn: DateTime
  reporterId: ID!
  reporter: User!
  messageId: UUID!
  message: DiscussionMessage!
}

enum ReportAction {
  Respected
  Dismissed
}

enum ReportAuditor {
  CommonModerator
  SystemAdmin
}

input ReportDiscussionMessageInput {
  messageId: UUID!
  note: String!
  for: ReportFor!
}

enum ReportFor {
  Nudity
  Violance
  Harassment
  FalseNews
  Spam
  Hate
  Other
}

enum ReportStatus {
  Active
  Clossed
}

input ReportStatusFilterInput {
  in: [ReportStatus]
  not: [ReportStatus]
}

input ReportWhereInput {
  status: ReportStatusFilterInput
  for: ReportFor
}

type Role implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  displayName: String!
  description: String!
  permissions: [String!]!
  users: [User!]!
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type Settings {
  permissions: [String]!
}

enum SortOrder {
  asc
  desc
}

type Statistic implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: Int!
  commons: Int!
  fundingProposals: Int!
  joinProposals: Int!
}

input StatisticsWhereInput {
  type: StatisticType
}

enum StatisticType {
  AllTime
  Hourly
  Daily
  Weekly
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  in: [String!]
  notIn: [String!]
}

type Subscription {
  onProposalChange(proposalId: ID!): Proposal
  discussionMessageCreated(discussionId: ID!): DiscussionMessage
  notificationCreated: Notification
}

enum SubscriptionPaymentStatus {
  AwaitingInitialPayment
  Pending
  Successful
  Unsuccessful
}

enum SubscriptionStatus {
  Pending
  Active
  PaymentFailed
  CanceledByUser
  CanceledByPaymentFailure
}

input UpdateCommonInput {
  commonId: ID!
  name: String
  image: String
  action: String
  byline: String
  description: String
  links: [CommonLinkInput!]
  rules: [CommonRuleInput!]
}

input UpdateNotificationSettingsInput {
  id: String!
  showInUserFeed: Boolean
  sendPush: Boolean
  sendEmail: Boolean
}

input UpdateNotificationTemplateInput {
  id: String!
  subject: String
  content: String
  fromEmail: String
  fromName: String
  bcc: String
  bccName: String
}

input UpdateUserInput {
  id: String!
  firstName: String
  lastName: String
  photo: String
  intro: String
  country: Country
  notificationLanguage: NotificationLanguage
}

scalar URL

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  country: Country!
  intro: String
  displayName: String!
  photo: String!
  email: String!
  permissions: [String!]!
  wires: [Wire!]!
  events(take: Int = 10, skip: Int = 0, orderBy: EventOrderByInput): [Event!]!
  commons: [Common!]!
  proposals(take: Int = 10, skip: Int = 0, where: ProposalWhereInput): [Proposal!]!
  subscriptions: [CommonSubscription!]!
  notifications(orderBy: NotificationOrderByInput = {createdAt: desc}, cursor: NotificationWhereUniqueInput, take: Int = 10, skip: Int): [Notification!]!
  billingDetails: [UserBillingDetails!]!
  notificationTokens: [UserNotificationToken!]!
  discussionSubscriptions(take: Int = 10, skip: Int = 0, orderBy: DiscussionSubscriptionOrderByInput): [DiscussionSubscription!]!
}

type UserBillingDetails implements BaseEntity & Address {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  line1: String
  line2: String
  city: String!
  country: String!
  postalCode: String!
  district: String
  name: String!
}

type UserNotificationToken implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  state: UserNotificationTokenState!
  token: String!
  description: String!
  lastUsed: DateTime!
  lastVerified: DateTime!
}

enum UserNotificationTokenState {
  Active
  Expired
  Voided
}

input UserWhereInput {
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  OR: [UserWhereInput!]
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  userId: ID!
}

scalar UUID

scalar Void

type Vote {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  outcome: VoteOutcome!
  voterId: ID!
  voter: CommonMember!
}

enum VoteOutcome {
  Approve
  Condemn
}

type Wire implements BaseEntity {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  circleId: String
  circleFingerprint: String
  description: String
  userId: String!
}

type WireBankAccount implements BaseEntity & Address {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  line1: String
  line2: String
  city: String!
  country: String!
  postalCode: String!
  district: String
  bankName: String!
}

input WireWhereInput {
  userId: StringFilter
}
