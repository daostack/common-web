model Payment {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  processed      Boolean @default(false)
  processedError Boolean @default(false)

  type   PaymentType
  status PaymentStatus @default(NotAttempted)

  circlePaymentStatus PaymentCircleStatus?
  circlePaymentId     String?

  amount Int

  card Card @relation(fields: [cardId], references: [id])

  user   User    @relation(fields: [userId], references: [id])
  common Common? @relation(fields: [commonId], references: [id])

  join         JoinProposal?  @relation(fields: [joinId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  subscriptionId String?
  joinId         String?

  userId   String
  commonId String?

  cardId String
}

enum PaymentType {
  OneTimePayment

  SubscriptionInitialPayment
  SubscriptionSequentialPayment

  ImportedPayment
}

enum PaymentCircleStatus {
  pending
  failed
  confirmed
  paid
}

enum PaymentStatus {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}

model Card {
  id String @id @default(uuid())

  circleCardId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  digits  String
  network CardNetwork

  cvvCheck String
  avsCheck String

  user     User      @relation(fields: [userId], references: [id])
  payments Payment[]

  proposal      JoinProposal[]
  subscriptions Subscription[]

  billingDetails CardBillingDetail?

  userId String
}

enum CardNetwork {
  VISA
  MASTERCARD
}

model CardBillingDetail {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  line1 String
  line2 String?

  city       String
  country    String
  district   String?
  postalCode String

  card Card @relation(fields: [cardId], references: [id])

  cardId String
}

