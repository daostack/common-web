/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { IRequestContext } from "./../context"
import { QueryComplexity } from "nexus/dist/plugins/queryComplexityPlugin"
import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "URL";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    uuid<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "UUID";
    void<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Void";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "URL";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    uuid<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "UUID";
    void<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Void";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ActOnReportInput: { // input type
    action: NexusGenEnums['ReportAction']; // ReportAction!
    reportId: NexusGenScalars['UUID']; // UUID!
  }
  BillingDetailsInput: { // input type
    city: string; // String!
    country: string; // String!
    district?: string | null; // String
    line1: string; // String!
    line2?: string | null; // String
    name: string; // String!
    postalCode: string; // String!
  }
  CommonLinkInput: { // input type
    title: string; // String!
    url: string; // String!
  }
  CommonMemberOrderByInput: { // input type
    createdAt: NexusGenEnums['SortOrder']; // SortOrder!
  }
  CommonRuleInput: { // input type
    description?: string | null; // String
    title: string; // String!
  }
  CommonWhereInput: { // input type
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  CommonWhereUniqueInput: { // input type
    id: string; // ID!
  }
  CreateCardInput: { // input type
    billingDetails: NexusGenInputs['BillingDetailsInput']; // BillingDetailsInput!
    encryptedData: string; // String!
    expMonth: number; // Int!
    expYear: number; // Int!
    keyId: string; // String!
  }
  CreateCommonInput: { // input type
    action?: string | null; // String
    byline?: string | null; // String
    description?: string | null; // String
    fundingMinimumAmount: number; // Int!
    fundingType: NexusGenEnums['FundingType']; // FundingType!
    image: string; // String!
    links?: NexusGenInputs['CommonLinkInput'][] | null; // [CommonLinkInput!]
    name: string; // String!
    rules?: NexusGenInputs['CommonRuleInput'][] | null; // [CommonRuleInput!]
  }
  CreateDiscussionInput: { // input type
    commonId: string; // ID!
    description: string; // String!
    proposalId?: string | null; // ID
    topic: string; // String!
  }
  CreateDiscussionMessageInput: { // input type
    discussionId: string; // ID!
    message: string; // String!
  }
  CreateFundingProposalInput: { // input type
    amount: number; // Int!
    commonId: string; // ID!
    description: string; // String!
    files?: NexusGenInputs['ProposalFileInput'][] | null; // [ProposalFileInput!]
    images?: NexusGenInputs['ProposalImageInput'][] | null; // [ProposalImageInput!]
    links?: NexusGenInputs['ProposalLinkInput'][] | null; // [ProposalLinkInput!]
    title: string; // String!
  }
  CreateJoinProposalInput: { // input type
    cardId: string; // String!
    commonId: string; // String!
    description: string; // String!
    fundingAmount: number; // Int!
    links?: NexusGenInputs['LinkInput'][] | null; // [LinkInput!]
    title: string; // String!
  }
  CreateNotificationEventSettingsInput: { // input type
    description: string; // String!
    onEvent: NexusGenEnums['EventType']; // EventType!
    sendNotificationType: NexusGenEnums['NotificationType']; // NotificationType!
    sendToCommon: boolean; // Boolean!
    sendToEveryone: boolean; // Boolean!
    sendToUser: boolean; // Boolean!
  }
  CreateNotificationTemplateInput: { // input type
    content: string; // String!
    forType: NexusGenEnums['NotificationType']; // NotificationType!
    fromEmail?: string | null; // String
    fromName?: string | null; // String
    language: NexusGenEnums['NotificationLanguage']; // NotificationLanguage!
    subject: string; // String!
    templateType: NexusGenEnums['NotificationTemplateType']; // NotificationTemplateType!
  }
  CreatePayoutInput: { // input type
    description?: string | null; // String
    proposalIds: string[]; // [ID!]!
    wireId: string; // ID!
  }
  CreateReportInput: { // input type
    for: NexusGenEnums['ReportFor']; // ReportFor!
    messageId?: NexusGenScalars['UUID'] | null; // UUID
    note: string; // String!
    proposalId?: NexusGenScalars['UUID'] | null; // UUID
    type: NexusGenEnums['ReportType']; // ReportType!
  }
  CreateRoleInput: { // input type
    description: string; // String!
    displayName: string; // String!
    name: string; // String!
    permissions: string[]; // [String!]!
  }
  CreateUserBillingDetailsInput: { // input type
    city: string; // String!
    country: NexusGenEnums['Country']; // Country!
    district?: string | null; // String
    line1: string; // String!
    line2?: string | null; // String
    name: string; // String!
    postalCode: string; // String!
  }
  CreateUserInput: { // input type
    country: NexusGenEnums['Country']; // Country!
    email: string; // String!
    firstName: string; // String!
    intro?: string | null; // String
    lastName: string; // String!
    photo: string; // String!
  }
  CreateUserNotificationTokenInput: { // input type
    description: string; // String!
    token: string; // String!
  }
  CreateVoteInput: { // input type
    outcome: NexusGenEnums['VoteOutcome']; // VoteOutcome!
    proposalId: string; // ID!
  }
  CreateWireBankAccountInput: { // input type
    bankName: string; // String!
    city: string; // String!
    country: NexusGenEnums['Country']; // Country!
    district?: string | null; // String
    line1?: string | null; // String
    line2?: string | null; // String
    postalCode: string; // String!
  }
  CreateWireInput: { // input type
    accountNumber?: string | null; // String
    billingDetailsId?: string | null; // String
    createBillingDetails?: NexusGenInputs['CreateUserBillingDetailsInput'] | null; // CreateUserBillingDetailsInput
    createWireBankDetails?: NexusGenInputs['CreateWireBankAccountInput'] | null; // CreateWireBankAccountInput
    iban?: string | null; // String
    routingNumber?: string | null; // String
    userId: string; // String!
    wireBankDetailsId?: string | null; // String
  }
  DiscussionMessagesOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
    updatedAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  DiscussionSubscriptionOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
    updatedAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  DiscussionWhereInput: { // input type
    commonId?: NexusGenScalars['UUID'] | null; // UUID
    commonMemberId?: NexusGenScalars['UUID'] | null; // UUID
    userId?: string | null; // ID
  }
  EventOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
    type?: NexusGenEnums['SortOrder'] | null; // SortOrder
    updatedAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  FundingProposalWhereInput: { // input type
    fundingState?: NexusGenEnums['FundingState'] | null; // FundingState
  }
  LinkInput: { // input type
    title: string; // String!
    url: string; // String!
  }
  NotificationOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
    status?: NexusGenEnums['SortOrder'] | null; // SortOrder
    updatedAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  NotificationSettingsWhereInput: { // input type
    type?: NexusGenEnums['NotificationType'] | null; // NotificationType
  }
  NotificationTemplateWhereInput: { // input type
    forType?: NexusGenEnums['NotificationType'] | null; // NotificationType
    language?: NexusGenEnums['NotificationLanguage'] | null; // NotificationLanguage
    type?: NexusGenEnums['NotificationTemplateType'] | null; // NotificationTemplateType
  }
  NotificationWhereInput: { // input type
    commonId?: NexusGenScalars['UUID'] | null; // UUID
    discussionId?: NexusGenScalars['UUID'] | null; // UUID
    proposalId?: NexusGenScalars['UUID'] | null; // UUID
    seenStatus?: NexusGenEnums['NotificationSeenStatus'] | null; // NotificationSeenStatus
    type?: NexusGenEnums['NotificationType'] | null; // NotificationType
    userId?: string | null; // ID
  }
  NotificationWhereUniqueInput: { // input type
    id?: NexusGenScalars['UUID'] | null; // UUID
  }
  PaginateInput: { // input type
    skip: number; // Int!
    take: number; // Int!
  }
  PaymentsWhereInput: { // input type
    commonId?: NexusGenScalars['UUID'] | null; // UUID
    userId?: NexusGenScalars['UUID'] | null; // UUID
  }
  PayoutApproverFilter: { // input type
    every?: NexusGenInputs['PayoutApproversWhereInput'] | null; // PayoutApproversWhereInput
    none?: NexusGenInputs['PayoutApproversWhereInput'] | null; // PayoutApproversWhereInput
    some?: NexusGenInputs['PayoutApproversWhereInput'] | null; // PayoutApproversWhereInput
  }
  PayoutApproversWhereInput: { // input type
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    outcome?: NexusGenEnums['PayoutApproverResponse'] | null; // PayoutApproverResponse
    userId?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  PayoutStatusFilter: { // input type
    equals?: NexusGenEnums['PayoutStatus'] | null; // PayoutStatus
    in?: Array<NexusGenEnums['PayoutStatus'] | null> | null; // [PayoutStatus]
    not?: NexusGenEnums['PayoutStatus'] | null; // PayoutStatus
    notIn?: Array<NexusGenEnums['PayoutStatus'] | null> | null; // [PayoutStatus]
  }
  PayoutWhereInput: { // input type
    approvers?: NexusGenInputs['PayoutApproverFilter'] | null; // PayoutApproverFilter
    isPendingApprover?: boolean | null; // Boolean
    status?: NexusGenInputs['PayoutStatusFilter'] | null; // PayoutStatusFilter
  }
  ProposalFileInput: { // input type
    value: string; // String!
  }
  ProposalImageInput: { // input type
    value: string; // String!
  }
  ProposalLinkInput: { // input type
    title: string; // String!
    url: string; // String!
  }
  ProposalWhereInput: { // input type
    AND?: NexusGenInputs['ProposalWhereInput'][] | null; // [ProposalWhereInput!]
    OR?: NexusGenInputs['ProposalWhereInput'][] | null; // [ProposalWhereInput!]
    commonId?: NexusGenScalars['UUID'] | null; // UUID
    commonMemberId?: NexusGenScalars['UUID'] | null; // UUID
    description?: NexusGenInputs['StringFilter'] | null; // StringFilter
    id?: NexusGenInputs['StringFilter'] | null; // StringFilter
    state?: NexusGenEnums['ProposalState'] | null; // ProposalState
    title?: NexusGenInputs['StringFilter'] | null; // StringFilter
    type?: NexusGenEnums['ProposalType'] | null; // ProposalType
    userId?: string | null; // ID
  }
  ProposalWhereUniqueInput: { // input type
    id: NexusGenScalars['UUID']; // UUID!
  }
  ReportStatusFilterInput: { // input type
    in?: Array<NexusGenEnums['ReportStatus'] | null> | null; // [ReportStatus]
    not?: Array<NexusGenEnums['ReportStatus'] | null> | null; // [ReportStatus]
  }
  ReportWhereInput: { // input type
    for?: NexusGenEnums['ReportFor'] | null; // ReportFor
    status?: NexusGenInputs['ReportStatusFilterInput'] | null; // ReportStatusFilterInput
  }
  RoleWhereUniqueInput: { // input type
    id?: string | null; // ID
    name?: string | null; // String
  }
  StatisticsWhereInput: { // input type
    type?: NexusGenEnums['StatisticType'] | null; // StatisticType
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  UpdateCommonInput: { // input type
    action?: string | null; // String
    byline?: string | null; // String
    commonId: string; // ID!
    description?: string | null; // String
    image?: string | null; // String
    links?: NexusGenInputs['CommonLinkInput'][] | null; // [CommonLinkInput!]
    name?: string | null; // String
    rules?: NexusGenInputs['CommonRuleInput'][] | null; // [CommonRuleInput!]
  }
  UpdateNotificationSettingsInput: { // input type
    id: string; // String!
    sendEmail?: boolean | null; // Boolean
    sendPush?: boolean | null; // Boolean
    showInUserFeed?: boolean | null; // Boolean
  }
  UpdateNotificationTemplateInput: { // input type
    bcc?: string | null; // String
    bccName?: string | null; // String
    content?: string | null; // String
    fromEmail?: string | null; // String
    fromName?: string | null; // String
    id: string; // String!
    subject?: string | null; // String
  }
  UpdateUserInput: { // input type
    country?: NexusGenEnums['Country'] | null; // Country
    firstName?: string | null; // String
    id: string; // String!
    intro?: string | null; // String
    lastName?: string | null; // String
    notificationLanguage?: NexusGenEnums['NotificationLanguage'] | null; // NotificationLanguage
    photo?: string | null; // String
  }
  UserWhereInput: { // input type
    AND?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    OR?: NexusGenInputs['UserWhereInput'][] | null; // [UserWhereInput!]
    email?: NexusGenInputs['StringFilter'] | null; // StringFilter
    firstName?: NexusGenInputs['StringFilter'] | null; // StringFilter
    lastName?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  UserWhereUniqueInput: { // input type
    userId: string; // ID!
  }
  WireWhereInput: { // input type
    userId?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
}

export interface NexusGenEnums {
  CommonMemberRole: "Founder" | "Moderator"
  Country: "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "UM" | "US" | "UY" | "UZ" | "Unknown" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "YE" | "YT" | "ZA" | "ZM" | "ZW"
  DiscussionMessageType: "Message"
  DiscussionSubscriptionType: "AllNotifications" | "NoNotification" | "OnlyMentions"
  DiscussionType: "CommonDiscussion" | "ProposalDiscussion"
  EventType: "CardCreated" | "CardCvvVerificationFailed" | "CardCvvVerificationPassed" | "CommonBalanceUpdated" | "CommonCreated" | "CommonDelisted" | "CommonMemberCreated" | "CommonMemberRoleAdded" | "CommonMemberRoleRemoved" | "CommonUpdated" | "CommonWhitelisted" | "DiscussionCreated" | "DiscussionMessageCreated" | "DiscussionSubscriptionCreated" | "DiscussionSubscriptionTypeChanged" | "FundingRequestAccepted" | "FundingRequestCreated" | "FundingRequestRejected" | "JoinRequestAccepted" | "JoinRequestCreated" | "JoinRequestRejected" | "NotificationTemplateCreated" | "NotificationTemplateUpdated" | "PaymentCreated" | "PaymentFailed" | "PaymentSucceeded" | "PayoutApprovalGiven" | "PayoutApproved" | "PayoutApproverCreated" | "PayoutCompleted" | "PayoutCreated" | "PayoutExecuted" | "PayoutRejected" | "PayoutRejectionGiven" | "ProposalExpired" | "ProposalMajorityReached" | "ReportCreated" | "ReportDismissed" | "ReportRespected" | "RoleCreated" | "RoleDeleted" | "RolePermissionAdded" | "RolePermissionRemoved" | "RoleUpdated" | "UserAddedToRole" | "UserCreated" | "UserNotificationTokenCreated" | "UserNotificationTokenExpired" | "UserNotificationTokenRefreshed" | "UserNotificationTokenVoided" | "UserRemovedFromRole" | "UserUpdated" | "VoteCreated" | "WireCreated" | "WireUpdated"
  FundingState: "Eligible" | "NotEligible" | "Redeemed"
  FundingType: "Monthly" | "OneTime"
  NotificationLanguage: "BG" | "EN" | "HE" | "JP" | "KO" | "RU"
  NotificationSeenStatus: "Done" | "NotSeen" | "Seen"
  NotificationTemplateType: "EmailNotification" | "PushNotification"
  NotificationType: "FundingRequestAccepted" | "FundingRequestRejected" | "General" | "JoinRequestAccepted" | "JoinRequestRejected"
  PaymentCircleStatus: "confirmed" | "failed" | "paid" | "pending"
  PaymentState: "NotAttempted" | "Pending" | "Successful" | "Unsuccessful"
  PaymentStatus: "NotAttempted" | "Pending" | "Successful" | "Unsuccessful"
  PaymentType: "ImportedPayment" | "OneTimePayment" | "SubscriptionInitialPayment" | "SubscriptionSequentialPayment"
  PayoutApproverResponse: "Approved" | "Declined" | "Pending"
  PayoutStatus: "CircleComplete" | "CircleFailed" | "CirclePending" | "Failed" | "PendingApproval"
  ProposalState: "Accepted" | "AcceptedButInsufficientFunding" | "Countdown" | "Finalizing" | "Rejected"
  ProposalType: "FundingRequest" | "JoinRequest"
  ReportAction: "Dismissed" | "Respected"
  ReportAuditor: "CommonModerator" | "SystemAdmin"
  ReportFlag: "Clear" | "Hidden" | "Reported"
  ReportFor: "FalseNews" | "Harassment" | "Hate" | "Nudity" | "Other" | "Spam" | "Violance"
  ReportStatus: "Active" | "Closed"
  ReportType: "MessageReport" | "ProposalReport"
  SortOrder: "asc" | "desc"
  StatisticType: "AllTime" | "Daily" | "Hourly" | "Weekly"
  SubscriptionPaymentStatus: "AwaitingInitialPayment" | "Pending" | "Successful" | "Unsuccessful"
  SubscriptionStatus: "Active" | "CanceledByPaymentFailure" | "CanceledByUser" | "PaymentFailed" | "Pending"
  UserNotificationTokenState: "Active" | "Expired" | "Voided"
  VoteOutcome: "Approve" | "Condemn"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
  URL: any
  UUID: any
  Void: any
}

export interface NexusGenObjects {
  Card: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Common: { // root type
    action?: string | null; // String
    balance: number; // Int!
    byline?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    fundingMinimumAmount: number; // Int!
    fundingType: NexusGenEnums['FundingType']; // FundingType!
    id: string; // ID!
    image: string; // String!
    links?: NexusGenScalars['JSON'] | null; // JSON
    name: string; // String!
    raised: number; // Int!
    rules?: NexusGenScalars['JSON'] | null; // JSON
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    whitelisted: boolean; // Boolean!
  }
  CommonMember: { // root type
    commonId: string; // ID!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    roles: NexusGenEnums['CommonMemberRole'][]; // [CommonMemberRole!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // ID!
  }
  CommonSubscription: { // root type
    amount: number; // Int!
    chargedAt: NexusGenScalars['DateTime']; // DateTime!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    dueDate: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    paymentStatus: NexusGenEnums['SubscriptionPaymentStatus']; // SubscriptionPaymentStatus!
    status: NexusGenEnums['SubscriptionStatus']; // SubscriptionStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    voided: boolean; // Boolean!
  }
  CommonUpdate: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Discussion: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    latestMessage: NexusGenScalars['DateTime']; // DateTime!
    topic: string; // String!
    type: NexusGenEnums['DiscussionType']; // DiscussionType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  DiscussionMessage: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    flag: NexusGenEnums['ReportFlag']; // ReportFlag!
    id: NexusGenScalars['UUID']; // UUID!
    message: string; // String!
    type: NexusGenEnums['DiscussionMessageType']; // DiscussionMessageType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  DiscussionSubscription: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    discussionId: NexusGenScalars['UUID']; // UUID!
    id: NexusGenScalars['UUID']; // UUID!
    type: NexusGenEnums['DiscussionSubscriptionType']; // DiscussionSubscriptionType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Event: { // root type
    commonId?: string | null; // ID
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    payload?: NexusGenScalars['JSON'] | null; // JSON
    type: NexusGenEnums['EventType']; // EventType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId?: string | null; // ID
  }
  FundingProposal: { // root type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fundingState: NexusGenEnums['FundingState']; // FundingState!
    id: NexusGenScalars['UUID']; // UUID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  JoinProposal: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    funding: number; // Int!
    fundingType: NexusGenEnums['FundingType']; // FundingType!
    id: NexusGenScalars['UUID']; // UUID!
    paymentState: NexusGenEnums['PaymentState']; // PaymentState!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Link: { // root type
    title: string; // String!
    url: string; // String!
  }
  Mutation: {};
  Notification: { // root type
    commonId?: NexusGenScalars['UUID'] | null; // UUID
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    discussionId?: NexusGenScalars['UUID'] | null; // UUID
    id: NexusGenScalars['UUID']; // UUID!
    proposalId?: NexusGenScalars['UUID'] | null; // UUID
    seenStatus: NexusGenEnums['NotificationSeenStatus']; // NotificationSeenStatus!
    show: boolean; // Boolean!
    type: NexusGenEnums['NotificationType']; // NotificationType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: NexusGenScalars['UUID']; // UUID!
  }
  NotificationEventOptions: {};
  NotificationEventSettings: { // root type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    onEvent: NexusGenEnums['EventType']; // EventType!
    sendNotificationType: NexusGenEnums['NotificationType']; // NotificationType!
    sendToCommon: boolean; // Boolean!
    sendToEveryone: boolean; // Boolean!
    sendToUser: boolean; // Boolean!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  NotificationSystemSettings: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    sendEmail: boolean; // Boolean!
    sendPush: boolean; // Boolean!
    showInUserFeed: boolean; // Boolean!
    type: NexusGenEnums['NotificationType']; // NotificationType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  NotificationTemplate: { // root type
    bcc?: string | null; // String
    bccName?: string | null; // String
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    forType: NexusGenEnums['NotificationType']; // NotificationType!
    from?: string | null; // String
    fromName?: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    language: NexusGenEnums['NotificationLanguage']; // NotificationLanguage!
    subject: string; // String!
    templateType: NexusGenEnums['NotificationTemplateType']; // NotificationTemplateType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  NotificationTemplateOptions: {};
  Payment: { // root type
    amount?: number | null; // Int
    circlePaymentId?: string | null; // String
    circlePaymentStatus?: NexusGenEnums['PaymentCircleStatus'] | null; // PaymentCircleStatus
    commonId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fees?: number | null; // Int
    id: NexusGenScalars['UUID']; // UUID!
    processed: boolean; // Boolean!
    processedError: boolean; // Boolean!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    type: NexusGenEnums['PaymentType']; // PaymentType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Payout: { // root type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    status: NexusGenEnums['PayoutStatus']; // PayoutStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  PayoutApprover: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    outcome: NexusGenEnums['PayoutApproverResponse']; // PayoutApproverResponse!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // ID!
  }
  Proposal: { // root type
    commonId: NexusGenScalars['UUID']; // UUID!
    commonMemberId: NexusGenScalars['UUID']; // UUID!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    expiresAt: NexusGenScalars['DateTime']; // DateTime!
    files?: NexusGenScalars['JSON'] | null; // JSON
    flag: NexusGenEnums['ReportFlag']; // ReportFlag!
    fundingId?: NexusGenScalars['UUID'] | null; // UUID
    id: string; // ID!
    images?: NexusGenScalars['JSON'] | null; // JSON
    ipAddress?: string | null; // String
    joinId?: NexusGenScalars['UUID'] | null; // UUID
    links?: NexusGenScalars['JSON'] | null; // JSON
    state: NexusGenEnums['ProposalState']; // ProposalState!
    title?: string | null; // String
    type: NexusGenEnums['ProposalType']; // ProposalType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // ID!
    votesAgainst: number; // Int!
    votesFor: number; // Int!
  }
  Query: {};
  Report: { // root type
    action?: NexusGenEnums['ReportAction'] | null; // ReportAction
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    for: NexusGenEnums['ReportFor']; // ReportFor!
    id: NexusGenScalars['UUID']; // UUID!
    messageId?: NexusGenScalars['UUID'] | null; // UUID
    note: string; // String!
    proposalId?: NexusGenScalars['UUID'] | null; // UUID
    reporterId: string; // ID!
    reviewAuthority?: NexusGenEnums['ReportAuditor'] | null; // ReportAuditor
    reviewedOn?: NexusGenScalars['DateTime'] | null; // DateTime
    reviewerId?: string | null; // ID
    status: NexusGenEnums['ReportStatus']; // ReportStatus!
    type: NexusGenEnums['ReportType']; // ReportType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Role: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    displayName: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    name: string; // String!
    permissions: string[]; // [String!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Settings: {};
  Statistic: { // root type
    commons: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fundingProposals: number; // Int!
    id: NexusGenScalars['UUID']; // UUID!
    joinProposals: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    users: number; // Int!
  }
  Subscription: {};
  User: { // root type
    country: NexusGenEnums['Country']; // Country!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    intro?: string | null; // String
    lastName: string; // String!
    permissions: string[]; // [String!]!
    photo: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserBillingDetails: { // root type
    city: string; // String!
    country: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    district?: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    line1?: string | null; // String
    line2?: string | null; // String
    name: string; // String!
    postalCode: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserNotificationToken: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    lastUsed: NexusGenScalars['DateTime']; // DateTime!
    lastVerified: NexusGenScalars['DateTime']; // DateTime!
    state: NexusGenEnums['UserNotificationTokenState']; // UserNotificationTokenState!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Vote: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    outcome: NexusGenEnums['VoteOutcome']; // VoteOutcome!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Wire: { // root type
    circleFingerprint?: string | null; // String
    circleId?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  WireBankAccount: { // root type
    bankName: string; // String!
    city: string; // String!
    country: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    district?: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    line1?: string | null; // String
    line2?: string | null; // String
    postalCode: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
  Address: NexusGenRootTypes['UserBillingDetails'] | NexusGenRootTypes['WireBankAccount'];
  BaseEntity: NexusGenRootTypes['CommonMember'] | NexusGenRootTypes['CommonSubscription'] | NexusGenRootTypes['CommonUpdate'] | NexusGenRootTypes['Discussion'] | NexusGenRootTypes['DiscussionMessage'] | NexusGenRootTypes['DiscussionSubscription'] | NexusGenRootTypes['FundingProposal'] | NexusGenRootTypes['JoinProposal'] | NexusGenRootTypes['Notification'] | NexusGenRootTypes['NotificationEventSettings'] | NexusGenRootTypes['NotificationSystemSettings'] | NexusGenRootTypes['NotificationTemplate'] | NexusGenRootTypes['Payment'] | NexusGenRootTypes['Payout'] | NexusGenRootTypes['PayoutApprover'] | NexusGenRootTypes['Report'] | NexusGenRootTypes['Role'] | NexusGenRootTypes['Statistic'] | NexusGenRootTypes['UserBillingDetails'] | NexusGenRootTypes['UserNotificationToken'] | NexusGenRootTypes['Wire'] | NexusGenRootTypes['WireBankAccount'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Card: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Common: { // field return type
    action: string | null; // String
    activeFundingProposals: number; // Int!
    activeJoinProposals: number; // Int!
    activeProposals: number; // Int!
    balance: number; // Int!
    byline: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    discussions: NexusGenRootTypes['Discussion'][]; // [Discussion!]!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    fundingMinimumAmount: number; // Int!
    fundingType: NexusGenEnums['FundingType']; // FundingType!
    id: string; // ID!
    image: string; // String!
    links: NexusGenScalars['JSON'] | null; // JSON
    members: Array<NexusGenRootTypes['CommonMember'] | null>; // [CommonMember]!
    name: string; // String!
    proposals: NexusGenRootTypes['Proposal'][]; // [Proposal!]!
    raised: number; // Int!
    reports: NexusGenRootTypes['Report'][]; // [Report!]!
    rules: NexusGenScalars['JSON'] | null; // JSON
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    updates: NexusGenRootTypes['CommonUpdate'][]; // [CommonUpdate!]!
    whitelisted: boolean; // Boolean!
  }
  CommonMember: { // field return type
    common: NexusGenRootTypes['Common'] | null; // Common
    commonId: string; // ID!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    proposals: NexusGenRootTypes['Proposal'][]; // [Proposal!]!
    roles: NexusGenEnums['CommonMemberRole'][]; // [CommonMemberRole!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // ID!
  }
  CommonSubscription: { // field return type
    amount: number; // Int!
    chargedAt: NexusGenScalars['DateTime']; // DateTime!
    common: NexusGenRootTypes['Common']; // Common!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    dueDate: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    paymentStatus: NexusGenEnums['SubscriptionPaymentStatus']; // SubscriptionPaymentStatus!
    status: NexusGenEnums['SubscriptionStatus']; // SubscriptionStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    voided: boolean; // Boolean!
  }
  CommonUpdate: { // field return type
    change: NexusGenScalars['JSON'] | null; // JSON
    commonAfter: NexusGenRootTypes['Common']; // Common!
    commonBefore: NexusGenRootTypes['Common']; // Common!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Discussion: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    latestMessage: NexusGenScalars['DateTime']; // DateTime!
    messages: NexusGenRootTypes['DiscussionMessage'][]; // [DiscussionMessage!]!
    owner: NexusGenRootTypes['User'] | null; // User
    topic: string; // String!
    type: NexusGenEnums['DiscussionType']; // DiscussionType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  DiscussionMessage: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    flag: NexusGenEnums['ReportFlag']; // ReportFlag!
    id: NexusGenScalars['UUID']; // UUID!
    message: string; // String!
    owner: NexusGenRootTypes['User']; // User!
    reports: NexusGenRootTypes['Report'][]; // [Report!]!
    type: NexusGenEnums['DiscussionMessageType']; // DiscussionMessageType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  DiscussionSubscription: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    discussion: NexusGenRootTypes['Discussion']; // Discussion!
    discussionId: NexusGenScalars['UUID']; // UUID!
    id: NexusGenScalars['UUID']; // UUID!
    type: NexusGenEnums['DiscussionSubscriptionType']; // DiscussionSubscriptionType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Event: { // field return type
    commonId: string | null; // ID
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    payload: NexusGenScalars['JSON'] | null; // JSON
    type: NexusGenEnums['EventType']; // EventType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // ID
  }
  FundingProposal: { // field return type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fundingState: NexusGenEnums['FundingState']; // FundingState!
    id: NexusGenScalars['UUID']; // UUID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  JoinProposal: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    funding: number; // Int!
    fundingType: NexusGenEnums['FundingType']; // FundingType!
    id: NexusGenScalars['UUID']; // UUID!
    paymentState: NexusGenEnums['PaymentState']; // PaymentState!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Link: { // field return type
    title: string; // String!
    url: string; // String!
  }
  Mutation: { // field return type
    actOnReport: NexusGenRootTypes['Report'] | null; // Report
    approvePayout: NexusGenRootTypes['PayoutApprover'] | null; // PayoutApprover
    assignRole: NexusGenScalars['Void'] | null; // Void
    changeDiscussionSubscriptionType: NexusGenRootTypes['DiscussionSubscription'] | null; // DiscussionSubscription
    createCard: NexusGenRootTypes['Card']; // Card!
    createCommon: NexusGenRootTypes['Common']; // Common!
    createDiscussion: NexusGenRootTypes['Discussion']; // Discussion!
    createDiscussionMessage: NexusGenRootTypes['DiscussionMessage']; // DiscussionMessage!
    createFundingProposal: NexusGenRootTypes['Proposal']; // Proposal!
    createJoinProposal: NexusGenRootTypes['Proposal']; // Proposal!
    createNotificationEventSettings: NexusGenRootTypes['NotificationEventSettings'] | null; // NotificationEventSettings
    createNotificationTemplate: NexusGenRootTypes['NotificationTemplate'] | null; // NotificationTemplate
    createPayout: NexusGenRootTypes['Payout'] | null; // Payout
    createReport: NexusGenRootTypes['Report']; // Report!
    createRole: NexusGenRootTypes['Role'] | null; // Role
    createUser: NexusGenRootTypes['User']; // User!
    createUserBillingDetails: NexusGenRootTypes['UserBillingDetails'] | null; // UserBillingDetails
    createUserNotificationToken: NexusGenRootTypes['UserNotificationToken']; // UserNotificationToken!
    createVote: NexusGenRootTypes['Vote']; // Vote!
    createWire: NexusGenRootTypes['Wire'] | null; // Wire
    createWireBankAccount: NexusGenRootTypes['WireBankAccount'] | null; // WireBankAccount
    deleteEventNotificationSetting: boolean | null; // Boolean
    delistCommon: boolean | null; // Boolean
    finalizeProposal: boolean; // Boolean!
    unassignRole: NexusGenScalars['Void'] | null; // Void
    updateCommon: NexusGenRootTypes['Common'] | null; // Common
    updateNotificationSettings: NexusGenRootTypes['NotificationSystemSettings'] | null; // NotificationSystemSettings
    updateNotificationTemplate: NexusGenRootTypes['NotificationTemplate'] | null; // NotificationTemplate
    updateUser: NexusGenRootTypes['User'] | null; // User
    voidUserNotificationToken: NexusGenRootTypes['UserNotificationToken']; // UserNotificationToken!
    whitelistCommon: boolean | null; // Boolean
  }
  Notification: { // field return type
    common: NexusGenRootTypes['Common'] | null; // Common
    commonId: NexusGenScalars['UUID'] | null; // UUID
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    discussion: NexusGenRootTypes['Discussion'] | null; // Discussion
    discussionId: NexusGenScalars['UUID'] | null; // UUID
    id: NexusGenScalars['UUID']; // UUID!
    proposal: NexusGenRootTypes['Proposal'] | null; // Proposal
    proposalId: NexusGenScalars['UUID'] | null; // UUID
    seenStatus: NexusGenEnums['NotificationSeenStatus']; // NotificationSeenStatus!
    show: boolean; // Boolean!
    type: NexusGenEnums['NotificationType']; // NotificationType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: NexusGenScalars['UUID']; // UUID!
  }
  NotificationEventOptions: { // field return type
    availableEvents: NexusGenEnums['EventType'][]; // [EventType!]!
    availableNotifications: NexusGenEnums['NotificationType'][]; // [NotificationType!]!
  }
  NotificationEventSettings: { // field return type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    onEvent: NexusGenEnums['EventType']; // EventType!
    sendNotificationType: NexusGenEnums['NotificationType']; // NotificationType!
    sendToCommon: boolean; // Boolean!
    sendToEveryone: boolean; // Boolean!
    sendToUser: boolean; // Boolean!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  NotificationSystemSettings: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    sendEmail: boolean; // Boolean!
    sendPush: boolean; // Boolean!
    showInUserFeed: boolean; // Boolean!
    type: NexusGenEnums['NotificationType']; // NotificationType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  NotificationTemplate: { // field return type
    bcc: string | null; // String
    bccName: string | null; // String
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    forType: NexusGenEnums['NotificationType']; // NotificationType!
    from: string | null; // String
    fromName: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    language: NexusGenEnums['NotificationLanguage']; // NotificationLanguage!
    subject: string; // String!
    templateType: NexusGenEnums['NotificationTemplateType']; // NotificationTemplateType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  NotificationTemplateOptions: { // field return type
    languages: Array<NexusGenEnums['NotificationLanguage'] | null>; // [NotificationLanguage]!
    notificationTypes: Array<NexusGenEnums['NotificationType'] | null>; // [NotificationType]!
    templateTypes: Array<NexusGenEnums['NotificationTemplateType'] | null>; // [NotificationTemplateType]!
  }
  Payment: { // field return type
    amount: number | null; // Int
    circlePaymentId: string | null; // String
    circlePaymentStatus: NexusGenEnums['PaymentCircleStatus'] | null; // PaymentCircleStatus
    common: NexusGenRootTypes['Common']; // Common!
    commonId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fees: number | null; // Int
    id: NexusGenScalars['UUID']; // UUID!
    processed: boolean; // Boolean!
    processedError: boolean; // Boolean!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    type: NexusGenEnums['PaymentType']; // PaymentType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Payout: { // field return type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    proposals: NexusGenRootTypes['Proposal'][]; // [Proposal!]!
    status: NexusGenEnums['PayoutStatus']; // PayoutStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wire: NexusGenRootTypes['Wire']; // Wire!
  }
  PayoutApprover: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    outcome: NexusGenEnums['PayoutApproverResponse']; // PayoutApproverResponse!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // ID!
  }
  Proposal: { // field return type
    common: NexusGenRootTypes['Common']; // Common!
    commonId: NexusGenScalars['UUID']; // UUID!
    commonMemberId: NexusGenScalars['UUID']; // UUID!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    discussions: NexusGenRootTypes['Discussion'][]; // [Discussion!]!
    expiresAt: NexusGenScalars['DateTime']; // DateTime!
    files: NexusGenScalars['JSON'] | null; // JSON
    flag: NexusGenEnums['ReportFlag']; // ReportFlag!
    funding: NexusGenRootTypes['FundingProposal'] | null; // FundingProposal
    fundingId: NexusGenScalars['UUID'] | null; // UUID
    id: string; // ID!
    images: NexusGenScalars['JSON'] | null; // JSON
    ipAddress: string | null; // String
    join: NexusGenRootTypes['JoinProposal'] | null; // JoinProposal
    joinId: NexusGenScalars['UUID'] | null; // UUID
    links: NexusGenScalars['JSON'] | null; // JSON
    member: NexusGenRootTypes['CommonMember']; // CommonMember!
    state: NexusGenEnums['ProposalState']; // ProposalState!
    title: string | null; // String
    type: NexusGenEnums['ProposalType']; // ProposalType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // ID!
    votes: NexusGenRootTypes['Vote'][]; // [Vote!]!
    votesAgainst: number; // Int!
    votesFor: number; // Int!
  }
  Query: { // field return type
    common: NexusGenRootTypes['Common'] | null; // Common
    commons: Array<NexusGenRootTypes['Common'] | null> | null; // [Common]
    discussion: NexusGenRootTypes['Discussion'] | null; // Discussion
    discussions: Array<NexusGenRootTypes['Discussion'] | null> | null; // [Discussion]
    events: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    generateUserAuthToken: string; // String!
    getStatistics: Array<NexusGenRootTypes['Statistic'] | null> | null; // [Statistic]
    notificationEventOptions: NexusGenRootTypes['NotificationEventOptions'] | null; // NotificationEventOptions
    notificationEventSettings: Array<NexusGenRootTypes['NotificationEventSettings'] | null> | null; // [NotificationEventSettings]
    notificationSettings: Array<NexusGenRootTypes['NotificationSystemSettings'] | null> | null; // [NotificationSystemSettings]
    notificationTemplateOptions: NexusGenRootTypes['NotificationTemplateOptions'] | null; // NotificationTemplateOptions
    notificationTemplates: Array<NexusGenRootTypes['NotificationTemplate'] | null> | null; // [NotificationTemplate]
    notifications: Array<NexusGenRootTypes['Notification'] | null> | null; // [Notification]
    payment: NexusGenRootTypes['Payment'] | null; // Payment
    payments: Array<NexusGenRootTypes['Payment'] | null> | null; // [Payment]
    payout: NexusGenRootTypes['Payout'] | null; // Payout
    payouts: Array<NexusGenRootTypes['Payout'] | null> | null; // [Payout]
    proposal: NexusGenRootTypes['Proposal'] | null; // Proposal
    proposals: Array<NexusGenRootTypes['Proposal'] | null> | null; // [Proposal]
    report: NexusGenRootTypes['Report'] | null; // Report
    reports: Array<NexusGenRootTypes['Report'] | null> | null; // [Report]
    role: NexusGenRootTypes['Role'] | null; // Role
    roles: Array<NexusGenRootTypes['Role'] | null> | null; // [Role]
    settings: NexusGenRootTypes['Settings']; // Settings!
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    wires: Array<NexusGenRootTypes['Wire'] | null> | null; // [Wire]
  }
  Report: { // field return type
    action: NexusGenEnums['ReportAction'] | null; // ReportAction
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    for: NexusGenEnums['ReportFor']; // ReportFor!
    id: NexusGenScalars['UUID']; // UUID!
    message: NexusGenRootTypes['DiscussionMessage'] | null; // DiscussionMessage
    messageId: NexusGenScalars['UUID'] | null; // UUID
    note: string; // String!
    proposal: NexusGenRootTypes['Proposal'] | null; // Proposal
    proposalId: NexusGenScalars['UUID'] | null; // UUID
    reporter: NexusGenRootTypes['User']; // User!
    reporterId: string; // ID!
    reviewAuthority: NexusGenEnums['ReportAuditor'] | null; // ReportAuditor
    reviewedOn: NexusGenScalars['DateTime'] | null; // DateTime
    reviewer: NexusGenRootTypes['User'] | null; // User
    reviewerId: string | null; // ID
    status: NexusGenEnums['ReportStatus']; // ReportStatus!
    type: NexusGenEnums['ReportType']; // ReportType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Role: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    displayName: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    name: string; // String!
    permissions: string[]; // [String!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Settings: { // field return type
    permissions: Array<string | null>; // [String]!
  }
  Statistic: { // field return type
    commons: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fundingProposals: number; // Int!
    id: NexusGenScalars['UUID']; // UUID!
    joinProposals: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    users: number; // Int!
  }
  Subscription: { // field return type
    discussionMessageCreated: NexusGenRootTypes['DiscussionMessage'] | null; // DiscussionMessage
    notificationCreated: NexusGenRootTypes['Notification'] | null; // Notification
    onProposalChange: NexusGenRootTypes['Proposal'] | null; // Proposal
  }
  User: { // field return type
    billingDetails: NexusGenRootTypes['UserBillingDetails'][]; // [UserBillingDetails!]!
    commons: NexusGenRootTypes['Common'][]; // [Common!]!
    country: NexusGenEnums['Country']; // Country!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    discussionSubscriptions: NexusGenRootTypes['DiscussionSubscription'][]; // [DiscussionSubscription!]!
    displayName: string; // String!
    email: string; // String!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    firstName: string; // String!
    id: string; // ID!
    intro: string | null; // String
    lastName: string; // String!
    notificationTokens: NexusGenRootTypes['UserNotificationToken'][]; // [UserNotificationToken!]!
    notifications: NexusGenRootTypes['Notification'][]; // [Notification!]!
    permissions: string[]; // [String!]!
    photo: string; // String!
    proposals: NexusGenRootTypes['Proposal'][]; // [Proposal!]!
    subscriptions: NexusGenRootTypes['CommonSubscription'][]; // [CommonSubscription!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wires: NexusGenRootTypes['Wire'][]; // [Wire!]!
  }
  UserBillingDetails: { // field return type
    city: string; // String!
    country: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    district: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    line1: string | null; // String
    line2: string | null; // String
    name: string; // String!
    postalCode: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserNotificationToken: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: NexusGenScalars['UUID']; // UUID!
    lastUsed: NexusGenScalars['DateTime']; // DateTime!
    lastVerified: NexusGenScalars['DateTime']; // DateTime!
    state: NexusGenEnums['UserNotificationTokenState']; // UserNotificationTokenState!
    token: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Vote: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    outcome: NexusGenEnums['VoteOutcome']; // VoteOutcome!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    voter: NexusGenRootTypes['CommonMember']; // CommonMember!
    voterId: string; // ID!
  }
  Wire: { // field return type
    circleFingerprint: string | null; // String
    circleId: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  WireBankAccount: { // field return type
    bankName: string; // String!
    city: string; // String!
    country: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    district: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    line1: string | null; // String
    line2: string | null; // String
    postalCode: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Address: { // field return type
    city: string; // String!
    country: string; // String!
    district: string | null; // String
    line1: string | null; // String
    line2: string | null; // String
    postalCode: string; // String!
  }
  BaseEntity: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Card: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    updatedAt: 'DateTime'
  }
  Common: { // field return type name
    action: 'String'
    activeFundingProposals: 'Int'
    activeJoinProposals: 'Int'
    activeProposals: 'Int'
    balance: 'Int'
    byline: 'String'
    createdAt: 'DateTime'
    description: 'String'
    discussions: 'Discussion'
    events: 'Event'
    fundingMinimumAmount: 'Int'
    fundingType: 'FundingType'
    id: 'ID'
    image: 'String'
    links: 'JSON'
    members: 'CommonMember'
    name: 'String'
    proposals: 'Proposal'
    raised: 'Int'
    reports: 'Report'
    rules: 'JSON'
    updatedAt: 'DateTime'
    updates: 'CommonUpdate'
    whitelisted: 'Boolean'
  }
  CommonMember: { // field return type name
    common: 'Common'
    commonId: 'ID'
    createdAt: 'DateTime'
    id: 'UUID'
    proposals: 'Proposal'
    roles: 'CommonMemberRole'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'ID'
  }
  CommonSubscription: { // field return type name
    amount: 'Int'
    chargedAt: 'DateTime'
    common: 'Common'
    createdAt: 'DateTime'
    dueDate: 'DateTime'
    id: 'UUID'
    paymentStatus: 'SubscriptionPaymentStatus'
    status: 'SubscriptionStatus'
    updatedAt: 'DateTime'
    voided: 'Boolean'
  }
  CommonUpdate: { // field return type name
    change: 'JSON'
    commonAfter: 'Common'
    commonBefore: 'Common'
    createdAt: 'DateTime'
    id: 'UUID'
    updatedAt: 'DateTime'
  }
  Discussion: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'UUID'
    latestMessage: 'DateTime'
    messages: 'DiscussionMessage'
    owner: 'User'
    topic: 'String'
    type: 'DiscussionType'
    updatedAt: 'DateTime'
    userId: 'String'
  }
  DiscussionMessage: { // field return type name
    createdAt: 'DateTime'
    flag: 'ReportFlag'
    id: 'UUID'
    message: 'String'
    owner: 'User'
    reports: 'Report'
    type: 'DiscussionMessageType'
    updatedAt: 'DateTime'
    userId: 'String'
  }
  DiscussionSubscription: { // field return type name
    createdAt: 'DateTime'
    discussion: 'Discussion'
    discussionId: 'UUID'
    id: 'UUID'
    type: 'DiscussionSubscriptionType'
    updatedAt: 'DateTime'
    userId: 'String'
  }
  Event: { // field return type name
    commonId: 'ID'
    createdAt: 'DateTime'
    id: 'ID'
    payload: 'JSON'
    type: 'EventType'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'ID'
  }
  FundingProposal: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    fundingState: 'FundingState'
    id: 'UUID'
    updatedAt: 'DateTime'
  }
  JoinProposal: { // field return type name
    createdAt: 'DateTime'
    funding: 'Int'
    fundingType: 'FundingType'
    id: 'UUID'
    paymentState: 'PaymentState'
    updatedAt: 'DateTime'
  }
  Link: { // field return type name
    title: 'String'
    url: 'String'
  }
  Mutation: { // field return type name
    actOnReport: 'Report'
    approvePayout: 'PayoutApprover'
    assignRole: 'Void'
    changeDiscussionSubscriptionType: 'DiscussionSubscription'
    createCard: 'Card'
    createCommon: 'Common'
    createDiscussion: 'Discussion'
    createDiscussionMessage: 'DiscussionMessage'
    createFundingProposal: 'Proposal'
    createJoinProposal: 'Proposal'
    createNotificationEventSettings: 'NotificationEventSettings'
    createNotificationTemplate: 'NotificationTemplate'
    createPayout: 'Payout'
    createReport: 'Report'
    createRole: 'Role'
    createUser: 'User'
    createUserBillingDetails: 'UserBillingDetails'
    createUserNotificationToken: 'UserNotificationToken'
    createVote: 'Vote'
    createWire: 'Wire'
    createWireBankAccount: 'WireBankAccount'
    deleteEventNotificationSetting: 'Boolean'
    delistCommon: 'Boolean'
    finalizeProposal: 'Boolean'
    unassignRole: 'Void'
    updateCommon: 'Common'
    updateNotificationSettings: 'NotificationSystemSettings'
    updateNotificationTemplate: 'NotificationTemplate'
    updateUser: 'User'
    voidUserNotificationToken: 'UserNotificationToken'
    whitelistCommon: 'Boolean'
  }
  Notification: { // field return type name
    common: 'Common'
    commonId: 'UUID'
    createdAt: 'DateTime'
    discussion: 'Discussion'
    discussionId: 'UUID'
    id: 'UUID'
    proposal: 'Proposal'
    proposalId: 'UUID'
    seenStatus: 'NotificationSeenStatus'
    show: 'Boolean'
    type: 'NotificationType'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'UUID'
  }
  NotificationEventOptions: { // field return type name
    availableEvents: 'EventType'
    availableNotifications: 'NotificationType'
  }
  NotificationEventSettings: { // field return type name
    active: 'Boolean'
    createdAt: 'DateTime'
    description: 'String'
    id: 'UUID'
    onEvent: 'EventType'
    sendNotificationType: 'NotificationType'
    sendToCommon: 'Boolean'
    sendToEveryone: 'Boolean'
    sendToUser: 'Boolean'
    updatedAt: 'DateTime'
  }
  NotificationSystemSettings: { // field return type name
    createdAt: 'DateTime'
    id: 'UUID'
    sendEmail: 'Boolean'
    sendPush: 'Boolean'
    showInUserFeed: 'Boolean'
    type: 'NotificationType'
    updatedAt: 'DateTime'
  }
  NotificationTemplate: { // field return type name
    bcc: 'String'
    bccName: 'String'
    content: 'String'
    createdAt: 'DateTime'
    forType: 'NotificationType'
    from: 'String'
    fromName: 'String'
    id: 'UUID'
    language: 'NotificationLanguage'
    subject: 'String'
    templateType: 'NotificationTemplateType'
    updatedAt: 'DateTime'
  }
  NotificationTemplateOptions: { // field return type name
    languages: 'NotificationLanguage'
    notificationTypes: 'NotificationType'
    templateTypes: 'NotificationTemplateType'
  }
  Payment: { // field return type name
    amount: 'Int'
    circlePaymentId: 'String'
    circlePaymentStatus: 'PaymentCircleStatus'
    common: 'Common'
    commonId: 'String'
    createdAt: 'DateTime'
    fees: 'Int'
    id: 'UUID'
    processed: 'Boolean'
    processedError: 'Boolean'
    status: 'PaymentStatus'
    type: 'PaymentType'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Payout: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    description: 'String'
    id: 'UUID'
    proposals: 'Proposal'
    status: 'PayoutStatus'
    updatedAt: 'DateTime'
    wire: 'Wire'
  }
  PayoutApprover: { // field return type name
    createdAt: 'DateTime'
    id: 'UUID'
    outcome: 'PayoutApproverResponse'
    updatedAt: 'DateTime'
    userId: 'ID'
  }
  Proposal: { // field return type name
    common: 'Common'
    commonId: 'UUID'
    commonMemberId: 'UUID'
    createdAt: 'DateTime'
    description: 'String'
    discussions: 'Discussion'
    expiresAt: 'DateTime'
    files: 'JSON'
    flag: 'ReportFlag'
    funding: 'FundingProposal'
    fundingId: 'UUID'
    id: 'ID'
    images: 'JSON'
    ipAddress: 'String'
    join: 'JoinProposal'
    joinId: 'UUID'
    links: 'JSON'
    member: 'CommonMember'
    state: 'ProposalState'
    title: 'String'
    type: 'ProposalType'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'ID'
    votes: 'Vote'
    votesAgainst: 'Int'
    votesFor: 'Int'
  }
  Query: { // field return type name
    common: 'Common'
    commons: 'Common'
    discussion: 'Discussion'
    discussions: 'Discussion'
    events: 'Event'
    generateUserAuthToken: 'String'
    getStatistics: 'Statistic'
    notificationEventOptions: 'NotificationEventOptions'
    notificationEventSettings: 'NotificationEventSettings'
    notificationSettings: 'NotificationSystemSettings'
    notificationTemplateOptions: 'NotificationTemplateOptions'
    notificationTemplates: 'NotificationTemplate'
    notifications: 'Notification'
    payment: 'Payment'
    payments: 'Payment'
    payout: 'Payout'
    payouts: 'Payout'
    proposal: 'Proposal'
    proposals: 'Proposal'
    report: 'Report'
    reports: 'Report'
    role: 'Role'
    roles: 'Role'
    settings: 'Settings'
    user: 'User'
    users: 'User'
    wires: 'Wire'
  }
  Report: { // field return type name
    action: 'ReportAction'
    createdAt: 'DateTime'
    for: 'ReportFor'
    id: 'UUID'
    message: 'DiscussionMessage'
    messageId: 'UUID'
    note: 'String'
    proposal: 'Proposal'
    proposalId: 'UUID'
    reporter: 'User'
    reporterId: 'ID'
    reviewAuthority: 'ReportAuditor'
    reviewedOn: 'DateTime'
    reviewer: 'User'
    reviewerId: 'ID'
    status: 'ReportStatus'
    type: 'ReportType'
    updatedAt: 'DateTime'
  }
  Role: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    displayName: 'String'
    id: 'UUID'
    name: 'String'
    permissions: 'String'
    updatedAt: 'DateTime'
    users: 'User'
  }
  Settings: { // field return type name
    permissions: 'String'
  }
  Statistic: { // field return type name
    commons: 'Int'
    createdAt: 'DateTime'
    fundingProposals: 'Int'
    id: 'UUID'
    joinProposals: 'Int'
    updatedAt: 'DateTime'
    users: 'Int'
  }
  Subscription: { // field return type name
    discussionMessageCreated: 'DiscussionMessage'
    notificationCreated: 'Notification'
    onProposalChange: 'Proposal'
  }
  User: { // field return type name
    billingDetails: 'UserBillingDetails'
    commons: 'Common'
    country: 'Country'
    createdAt: 'DateTime'
    discussionSubscriptions: 'DiscussionSubscription'
    displayName: 'String'
    email: 'String'
    events: 'Event'
    firstName: 'String'
    id: 'ID'
    intro: 'String'
    lastName: 'String'
    notificationTokens: 'UserNotificationToken'
    notifications: 'Notification'
    permissions: 'String'
    photo: 'String'
    proposals: 'Proposal'
    subscriptions: 'CommonSubscription'
    updatedAt: 'DateTime'
    wires: 'Wire'
  }
  UserBillingDetails: { // field return type name
    city: 'String'
    country: 'String'
    createdAt: 'DateTime'
    district: 'String'
    id: 'UUID'
    line1: 'String'
    line2: 'String'
    name: 'String'
    postalCode: 'String'
    updatedAt: 'DateTime'
  }
  UserNotificationToken: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'UUID'
    lastUsed: 'DateTime'
    lastVerified: 'DateTime'
    state: 'UserNotificationTokenState'
    token: 'String'
    updatedAt: 'DateTime'
  }
  Vote: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    outcome: 'VoteOutcome'
    updatedAt: 'DateTime'
    voter: 'CommonMember'
    voterId: 'ID'
  }
  Wire: { // field return type name
    circleFingerprint: 'String'
    circleId: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'UUID'
    updatedAt: 'DateTime'
    userId: 'String'
  }
  WireBankAccount: { // field return type name
    bankName: 'String'
    city: 'String'
    country: 'String'
    createdAt: 'DateTime'
    district: 'String'
    id: 'UUID'
    line1: 'String'
    line2: 'String'
    postalCode: 'String'
    updatedAt: 'DateTime'
  }
  Address: { // field return type name
    city: 'String'
    country: 'String'
    district: 'String'
    line1: 'String'
    line2: 'String'
    postalCode: 'String'
  }
  BaseEntity: { // field return type name
    createdAt: 'DateTime'
    id: 'UUID'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Common: {
    discussions: { // args
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    events: { // args
      orderBy?: NexusGenInputs['EventOrderByInput'] | null; // EventOrderByInput
      skip?: number | null; // Int
      take: number | null; // Int
    }
    members: { // args
      orderBy?: NexusGenInputs['CommonMemberOrderByInput'] | null; // CommonMemberOrderByInput
      skip?: number | null; // Int
      take?: number | null; // Int
    }
    proposals: { // args
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['ProposalWhereInput'] | null; // ProposalWhereInput
    }
    reports: { // args
      where: NexusGenInputs['ReportWhereInput'] | null; // ReportWhereInput
    }
  }
  CommonMember: {
    proposals: { // args
      skip?: number | null; // Int
      take: number | null; // Int
      where?: NexusGenInputs['ProposalWhereInput'] | null; // ProposalWhereInput
    }
  }
  Discussion: {
    messages: { // args
      orderBy: NexusGenInputs['DiscussionMessagesOrderByInput'] | null; // DiscussionMessagesOrderByInput
      skip?: number | null; // Int
      take: number | null; // Int
    }
  }
  Mutation: {
    actOnReport: { // args
      input: NexusGenInputs['ActOnReportInput']; // ActOnReportInput!
    }
    approvePayout: { // args
      outcome: NexusGenEnums['PayoutApproverResponse']; // PayoutApproverResponse!
      payoutId: string; // ID!
    }
    assignRole: { // args
      roleId: string; // ID!
      userId: string; // ID!
    }
    changeDiscussionSubscriptionType: { // args
      id: string; // ID!
      type: NexusGenEnums['DiscussionSubscriptionType']; // DiscussionSubscriptionType!
    }
    createCard: { // args
      input: NexusGenInputs['CreateCardInput']; // CreateCardInput!
    }
    createCommon: { // args
      input: NexusGenInputs['CreateCommonInput']; // CreateCommonInput!
    }
    createDiscussion: { // args
      input: NexusGenInputs['CreateDiscussionInput']; // CreateDiscussionInput!
    }
    createDiscussionMessage: { // args
      input: NexusGenInputs['CreateDiscussionMessageInput']; // CreateDiscussionMessageInput!
    }
    createFundingProposal: { // args
      input: NexusGenInputs['CreateFundingProposalInput']; // CreateFundingProposalInput!
    }
    createJoinProposal: { // args
      input: NexusGenInputs['CreateJoinProposalInput']; // CreateJoinProposalInput!
    }
    createNotificationEventSettings: { // args
      input: NexusGenInputs['CreateNotificationEventSettingsInput']; // CreateNotificationEventSettingsInput!
    }
    createNotificationTemplate: { // args
      input: NexusGenInputs['CreateNotificationTemplateInput']; // CreateNotificationTemplateInput!
    }
    createPayout: { // args
      input: NexusGenInputs['CreatePayoutInput']; // CreatePayoutInput!
    }
    createReport: { // args
      input: NexusGenInputs['CreateReportInput']; // CreateReportInput!
    }
    createRole: { // args
      input: NexusGenInputs['CreateRoleInput']; // CreateRoleInput!
    }
    createUser: { // args
      input: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
    createUserBillingDetails: { // args
      input: NexusGenInputs['CreateUserBillingDetailsInput']; // CreateUserBillingDetailsInput!
    }
    createUserNotificationToken: { // args
      input: NexusGenInputs['CreateUserNotificationTokenInput']; // CreateUserNotificationTokenInput!
    }
    createVote: { // args
      input: NexusGenInputs['CreateVoteInput']; // CreateVoteInput!
    }
    createWire: { // args
      input: NexusGenInputs['CreateWireInput']; // CreateWireInput!
    }
    createWireBankAccount: { // args
      input: NexusGenInputs['CreateWireBankAccountInput']; // CreateWireBankAccountInput!
    }
    deleteEventNotificationSetting: { // args
      id: string; // ID!
    }
    delistCommon: { // args
      commonId: string; // String!
    }
    finalizeProposal: { // args
      proposalId: string; // ID!
    }
    unassignRole: { // args
      roleId: string; // ID!
      userId: string; // ID!
    }
    updateCommon: { // args
      input: NexusGenInputs['UpdateCommonInput']; // UpdateCommonInput!
    }
    updateNotificationSettings: { // args
      input: NexusGenInputs['UpdateNotificationSettingsInput']; // UpdateNotificationSettingsInput!
    }
    updateNotificationTemplate: { // args
      input: NexusGenInputs['UpdateNotificationTemplateInput']; // UpdateNotificationTemplateInput!
    }
    updateUser: { // args
      input: NexusGenInputs['UpdateUserInput']; // UpdateUserInput!
    }
    voidUserNotificationToken: { // args
      tokenId: string; // ID!
    }
    whitelistCommon: { // args
      commonId: string; // String!
    }
  }
  Proposal: {
    discussions: { // args
      skip?: number | null; // Int
      take?: number | null; // Int
    }
  }
  Query: {
    common: { // args
      where: NexusGenInputs['CommonWhereUniqueInput']; // CommonWhereUniqueInput!
    }
    commons: { // args
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['CommonWhereInput'] | null; // CommonWhereInput
    }
    discussion: { // args
      id: string; // ID!
    }
    discussions: { // args
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['DiscussionWhereInput'] | null; // DiscussionWhereInput
    }
    events: { // args
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
    }
    generateUserAuthToken: { // args
      authId: string; // String!
    }
    getStatistics: { // args
      where?: NexusGenInputs['StatisticsWhereInput'] | null; // StatisticsWhereInput
    }
    notificationEventSettings: { // args
      paginate: NexusGenInputs['PaginateInput']; // PaginateInput!
    }
    notificationSettings: { // args
      where?: NexusGenInputs['NotificationSettingsWhereInput'] | null; // NotificationSettingsWhereInput
    }
    notificationTemplates: { // args
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['NotificationTemplateWhereInput'] | null; // NotificationTemplateWhereInput
    }
    notifications: { // args
      paginate: NexusGenInputs['PaginateInput']; // PaginateInput!
    }
    payment: { // args
      id?: string | null; // ID
    }
    payments: { // args
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['PaymentsWhereInput'] | null; // PaymentsWhereInput
    }
    payout: { // args
      id: string; // ID!
    }
    payouts: { // args
      paginate: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['PayoutWhereInput'] | null; // PayoutWhereInput
    }
    proposal: { // args
      where: NexusGenInputs['ProposalWhereUniqueInput']; // ProposalWhereUniqueInput!
    }
    proposals: { // args
      fundingWhere?: NexusGenInputs['FundingProposalWhereInput'] | null; // FundingProposalWhereInput
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['ProposalWhereInput'] | null; // ProposalWhereInput
    }
    report: { // args
      id: string; // ID!
    }
    reports: { // args
      pagination?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['ReportWhereInput'] | null; // ReportWhereInput
    }
    role: { // args
      where: NexusGenInputs['RoleWhereUniqueInput']; // RoleWhereUniqueInput!
    }
    roles: { // args
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
    }
    user: { // args
      where?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
    }
    users: { // args
      paginate?: NexusGenInputs['PaginateInput'] | null; // PaginateInput
      where?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    }
    wires: { // args
      where?: NexusGenInputs['WireWhereInput'] | null; // WireWhereInput
    }
  }
  Subscription: {
    discussionMessageCreated: { // args
      discussionId: string; // ID!
    }
    onProposalChange: { // args
      proposalId: string; // ID!
    }
  }
  User: {
    discussionSubscriptions: { // args
      orderBy?: NexusGenInputs['DiscussionSubscriptionOrderByInput'] | null; // DiscussionSubscriptionOrderByInput
      skip?: number | null; // Int
      take: number | null; // Int
    }
    events: { // args
      orderBy?: NexusGenInputs['EventOrderByInput'] | null; // EventOrderByInput
      skip?: number | null; // Int
      take: number | null; // Int
    }
    notifications: { // args
      cursor?: NexusGenInputs['NotificationWhereUniqueInput'] | null; // NotificationWhereUniqueInput
      orderBy: NexusGenInputs['NotificationOrderByInput'] | null; // NotificationOrderByInput
      skip?: number | null; // Int
      take: number | null; // Int
    }
    proposals: { // args
      skip?: number | null; // Int
      take: number | null; // Int
      where?: NexusGenInputs['ProposalWhereInput'] | null; // ProposalWhereInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Address: "UserBillingDetails" | "WireBankAccount"
  BaseEntity: "CommonMember" | "CommonSubscription" | "CommonUpdate" | "Discussion" | "DiscussionMessage" | "DiscussionSubscription" | "FundingProposal" | "JoinProposal" | "Notification" | "NotificationEventSettings" | "NotificationSystemSettings" | "NotificationTemplate" | "Payment" | "Payout" | "PayoutApprover" | "Report" | "Role" | "Statistic" | "UserBillingDetails" | "UserNotificationToken" | "Wire" | "WireBankAccount"
}

export interface NexusGenTypeInterfaces {
  CommonMember: "BaseEntity"
  CommonSubscription: "BaseEntity"
  CommonUpdate: "BaseEntity"
  Discussion: "BaseEntity"
  DiscussionMessage: "BaseEntity"
  DiscussionSubscription: "BaseEntity"
  FundingProposal: "BaseEntity"
  JoinProposal: "BaseEntity"
  Notification: "BaseEntity"
  NotificationEventSettings: "BaseEntity"
  NotificationSystemSettings: "BaseEntity"
  NotificationTemplate: "BaseEntity"
  Payment: "BaseEntity"
  Payout: "BaseEntity"
  PayoutApprover: "BaseEntity"
  Report: "BaseEntity"
  Role: "BaseEntity"
  Statistic: "BaseEntity"
  UserBillingDetails: "Address" | "BaseEntity"
  UserNotificationToken: "BaseEntity"
  Wire: "BaseEntity"
  WireBankAccount: "Address" | "BaseEntity"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Address" | "BaseEntity";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: IRequestContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * The complexity for an individual field. Return a number
     * or a function that returns a number to specify the
     * complexity for this field.
     */
    complexity?: QueryComplexity<TypeName, FieldName>
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}