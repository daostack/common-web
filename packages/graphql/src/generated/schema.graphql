### This file was generated by Nexus Schema
### Do not make changes to this file directly


input ActOnReportInput {
  action: ReportAction!
  reportId: UUID!
}

interface BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: UUID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

input BillingDetailsInput {
  city: String!
  country: String!
  district: String
  line1: String!
  line2: String
  name: String!
  postalCode: String!
}

type Card {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

type Common {
  action: String
  activeFundingProposals: Int!
  activeJoinProposals: Int!
  activeProposals: Int!

  """The current available funds of the common. In cents"""
  balance: Int!
  byline: String

  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String
  discussions(skip: Int, take: Int): [Discussion!]!

  """List of events, that occurred in a common"""
  events(orderBy: EventOrderByInput, skip: Int = 0, take: Int = 10): [Event!]!

  """The minimum amount that the join request should provide. In cents"""
  fundingMinimumAmount: Int!
  fundingType: FundingType!

  """The main identifier of the item"""
  id: ID!
  image: String!
  links: JSON
  members(orderBy: CommonMemberOrderByInput, skip: Int, take: Int): [CommonMember]!

  """The name of the common as provided"""
  name: String!
  proposals(paginate: PaginateInput, where: ProposalWhereInput): [Proposal!]!

  """The total amount of money that the common has raised. In cents"""
  raised: Int!
  reports(where: ReportWhereInput = {status: {in: [Active]}}): [Report!]!
  rules: JSON

  """The date, at which the item was last modified"""
  updatedAt: DateTime!

  """The whitelisting state of a common"""
  whitelisted: Boolean!
}

input CommonLinkInput {
  title: String!
  url: String!
}

type CommonMember implements BaseEntity {
  common: Common
  commonId: ID!

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: UUID!
  proposals(skip: Int = 0, take: Int = 10, where: ProposalWhereInput): [Proposal!]!
  roles: [CommonMemberRole!]!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  user: User
  userId: ID!
}

input CommonMemberOrderByInput {
  createdAt: SortOrder!
}

enum CommonMemberRole {
  Founder
  Moderator
}

input CommonWhereUniqueInput {
  id: ID!
}

input CreateCardInput {
  billingDetails: BillingDetailsInput!

  """The sensitive part of the card as encrypted card"""
  encryptedData: String!
  expMonth: Int!
  expYear: Int!

  """The ID of the key used for the encryption of the sensitive data"""
  keyId: String!
}

input CreateCommonInput {
  action: String
  byline: String
  description: String
  fundingMinimumAmount: Int!
  fundingType: FundingType!
  image: String!
  links: [CommonLinkInput!]
  name: String!
  rules: [CommonLinkInput!]
}

input CreateDiscussionInput {
  """The ID of the common, for which we are creating the discussion"""
  commonId: ID!

  """Short description about the topic"""
  description: String!

  """The ID of the proposal, if this is proposal discussion"""
  proposalId: ID

  """The topic of the discussion to be created"""
  topic: String!
}

input CreateDiscussionMessageInput {
  """The ID of the discussion, for which we are creating the message"""
  discussionId: ID!

  """The message itself"""
  message: String!
}

input CreateFundingProposalInput {
  amount: Int!
  commonId: ID!
  description: String!
  files: [ProposalFileInput!]
  images: [ProposalImageInput!]
  links: [ProposalLinkInput!]
  title: String!
}

input CreateJoinProposalInput {
  cardId: String!
  commonId: String!
  description: String!
  fundingAmount: Int!
  links: [LinkInput!]
  title: String!
}

input CreateRoleInput {
  description: String!
  displayName: String!
  name: String!
  permissions: [String!]!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  photo: String!
}

input CreateUserNotificationTokenInput {
  description: String!
  token: String!
}

input CreateVoteInput {
  outcome: VoteOutcome!

  """The ID of the root of the proposal whether it is funding one or join"""
  proposalId: ID!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Discussion implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """Short description of the topic"""
  description: String!

  """The main identifier of the item"""
  id: UUID!

  """The date at which the last message on the discussion was added"""
  latestMessage: DateTime!
  messages(orderBy: DiscussionMessagesOrderByInput = {createdAt: asc}, skip: Int = 0, take: Int = 10): [DiscussionMessage!]!

  """The discussion creator"""
  owner: User

  """What this discussion is about"""
  topic: String!
  type: DiscussionType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  userId: String!
}

type DiscussionMessage implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!
  flag: DiscussionMessageFlag!

  """The main identifier of the item"""
  id: UUID!
  message: String!
  reports: [Report!]!
  type: DiscussionMessageType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum DiscussionMessageFlag {
  Clear
  Hidden
  Reported
}

enum DiscussionMessageType {
  Message
}

input DiscussionMessagesOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

type DiscussionSubscription implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!
  discussion: Discussion!
  discussionId: UUID!

  """The main identifier of the item"""
  id: UUID!
  type: DiscussionSubscriptionType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  userId: String!
}

input DiscussionSubscriptionOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum DiscussionSubscriptionType {
  AllNotifications
  NoNotification
  OnlyMentions
}

enum DiscussionType {
  CommonDiscussion
  ProposalDiscussion
}

input DiscussionWhereInput {
  commonId: UUID
  commonMemberId: UUID
  userId: ID
}

type Event {
  """The ID of the common, for whom the event was created"""
  commonId: ID

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: ID!
  payload: JSON

  """The type of the event in one of the predefined event types"""
  type: EventType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!

  """The event creator"""
  user: User

  """The ID of the event creator"""
  userId: ID
}

input EventOrderByInput {
  createdAt: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum EventType {
  CardCreated
  CardCvvVerificationFailed
  CardCvvVerificationPassed
  CommonCreated
  CommonDelisted
  CommonMemberCreated
  CommonMemberRoleAdded
  CommonMemberRoleRemoved
  CommonWhitelisted
  DiscussionCreated
  DiscussionMessageCreated
  DiscussionSubscriptionCreated
  DiscussionSubscriptionTypeChanged
  FundingRequestAccepted
  FundingRequestCreated
  FundingRequestRejected
  JoinRequestAccepted
  JoinRequestCreated
  JoinRequestRejected
  NotificationTemplateCreated
  NotificationTemplateUpdated
  PaymentCreated
  PaymentFailed
  PaymentSucceeded
  ProposalExpired
  ProposalMajorityReached
  ReportCreated
  ReportDismissed
  ReportRespected
  RoleCreated
  RoleDeleted
  RolePermissionAdded
  RolePermissionRemoved
  RoleUpdated
  UserAddedToRole
  UserCreated
  UserNotificationTokenCreated
  UserNotificationTokenExpired
  UserNotificationTokenRefreshed
  UserNotificationTokenVoided
  UserRemovedFromRole
  VoteCreated
}

type FundingProposal implements BaseEntity {
  """The amount that the proposal has requested in cents"""
  amount: Int!

  """The date, at which the item was created"""
  createdAt: DateTime!
  fundingState: FundingState!

  """The main identifier of the item"""
  id: UUID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum FundingState {
  AwaitingApproval
  Completed
  Confirmed
  Eligible
  NotEligible
  Pending
}

"""The funding type of the common"""
enum FundingType {
  Monthly
  OneTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JoinProposal implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """
  The amount that this join proposal will contribute to the common. In cents
  """
  funding: Int!
  fundingType: FundingType!

  """The main identifier of the item"""
  id: UUID!
  paymentState: PaymentState!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

type Link {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

input LinkInput {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

type Mutation {
  actOnReport(input: ActOnReportInput!): Report
  assignRole(roleId: ID!, userId: ID!): Void
  changeDiscussionSubscriptionType(
    """The ID of the discussion subscription to change"""
    id: ID!

    """The new subscription type"""
    type: DiscussionSubscriptionType!
  ): DiscussionSubscription
  createCard(input: CreateCardInput!): Card!
  createCommon(input: CreateCommonInput!): Common!
  createDiscussion(input: CreateDiscussionInput!): Discussion!
  createDiscussionMessage(input: CreateDiscussionMessageInput!): DiscussionMessage!
  createFundingProposal(input: CreateFundingProposalInput!): Proposal!

  """Create new proposal of type JOIN."""
  createJoinProposal(input: CreateJoinProposalInput!): Proposal!
  createRole(input: CreateRoleInput!): Role

  """Creates new user in the system"""
  createUser(input: CreateUserInput!): User!
  createUserNotificationToken(input: CreateUserNotificationTokenInput!): UserNotificationToken!
  createVote(input: CreateVoteInput!): Vote!
  delistCommon(commonId: String!): Boolean
  finalizeProposal(proposalId: ID!): Boolean!
  reportDiscussionMessage(input: ReportDiscussionMessageInput!): Report!
  unassignRole(roleId: ID!, userId: ID!): Void
  voidUserNotificationToken(tokenId: ID!): UserNotificationToken!
  whitelistCommon(commonId: String!): Boolean
}

type Notification implements BaseEntity {
  """The linked common. Expensive operation that may return null"""
  common: Common

  """The ID of the linked common. May be null"""
  commonId: UUID

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The linked discussion. Expensive operation that may return null"""
  discussion: Discussion

  """The ID of the linked discussion. May be null"""
  discussionId: UUID

  """The main identifier of the item"""
  id: UUID!

  """The linked proposal. Expensive operation that may return null"""
  proposal: Proposal

  """The ID of the linked proposal. May be null"""
  proposalId: UUID
  seenStatus: NotificationSeenStatus!

  """Whether the notification should be shown in the user notification feed"""
  show: Boolean!
  type: NotificationType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!

  """The linked user. Expensive operation"""
  user: User!

  """The ID of the linked user"""
  userId: UUID!
}

input NotificationOrderByInput {
  createdAt: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

enum NotificationSeenStatus {
  Done
  NotSeen
  Seen
}

enum NotificationType {
  FundingRequestAccepted
  FundingRequestRejected
  JoinRequestAccepted
  JoinRequestRejected
}

input NotificationWhereInput {
  commonId: UUID
  discussionId: UUID
  proposalId: UUID
  seenStatus: NotificationSeenStatus
  type: NotificationType
  userId: ID
}

input NotificationWhereUniqueInput {
  id: UUID
}

input PaginateInput {
  skip: Int = 0
  take: Int!
}

enum PaymentState {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}

type Proposal {
  common: Common!
  commonId: UUID!

  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String
  discussions(skip: Int, take: Int): [Discussion!]!
  expiresAt: DateTime!
  files: JSON
  funding: FundingProposal
  fundingId: UUID

  """The main identifier of the item"""
  id: ID!
  images: JSON

  """The IP from which the proposal was created"""
  ipAddress: String
  join: JoinProposal
  joinId: UUID
  links: JSON
  state: ProposalState!
  title: String
  type: ProposalType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  votesAgainst: Int!
  votesFor: Int!
}

input ProposalFileInput {
  value: String!
}

input ProposalImageInput {
  value: String!
}

input ProposalLinkInput {
  title: String!
  url: String!
}

enum ProposalState {
  Accepted
  Countdown
  Finalizing
  Rejected
}

enum ProposalType {
  FundingRequest
  JoinRequest
}

input ProposalWhereInput {
  commonId: UUID
  commonMemberId: UUID
  state: ProposalState
  type: ProposalType
  userId: ID
}

input ProposalWhereUniqueInput {
  id: UUID!
}

type Query {
  common(where: CommonWhereUniqueInput!): Common
  commons(paginate: PaginateInput): [Common]
  discussion(id: ID!): Discussion
  discussions(paginate: PaginateInput, where: DiscussionWhereInput): [Discussion]
  events(paginate: PaginateInput): [Event]
  generateUserAuthToken(authId: String!): String!
  getStatistics(where: StatisticsWhereInput): [Statistic]
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(paginate: PaginateInput, where: ProposalWhereInput): [Proposal]
  roles(paginate: PaginateInput): [Role]

  """
  Provide ID to fetch specific user or do not pass anything to get the currently authenticated user
  """
  user(userId: ID): User
}

type Report implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The type of violation that this report is for"""
  for: ReportFor!

  """The main identifier of the item"""
  id: UUID!
  message: DiscussionMessage!
  messageId: UUID!

  """The note that the report has left for the content"""
  note: String!
  reporter: User!
  reporterId: ID!

  """The date on which the report was last reviewed if reviewed"""
  reviewedOn: DateTime

  """The current status of the report"""
  status: ReportStatus!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum ReportAction {
  Dismissed
  Respected
}

enum ReportAuditor {
  CommonModerator
  SystemAdmin
}

input ReportDiscussionMessageInput {
  for: ReportFor!
  messageId: UUID!
  note: String!
}

enum ReportFor {
  FalseNews
  Harassment
  Hate
  Nudity
  Other
  Spam
  Violance
}

enum ReportStatus {
  Active
  Clossed
}

input ReportStatusFilterInput {
  in: [ReportStatus]
  not: [ReportStatus]
}

input ReportWhereInput {
  for: ReportFor
  status: ReportStatusFilterInput
}

type Role implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String!
  displayName: String!

  """The main identifier of the item"""
  id: UUID!
  name: String!
  permissions: [String!]!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum SortOrder {
  asc
  desc
}

type Statistic implements BaseEntity {
  commons: Int!

  """The date, at which the item was created"""
  createdAt: DateTime!
  fundingProposals: Int!

  """The main identifier of the item"""
  id: UUID!
  joinProposals: Int!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  users: Int!
}

enum StatisticType {
  AllTime
  Daily
  Hourly
  Weekly
}

input StatisticsWhereInput {
  type: StatisticType
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  discussionMessageCreated(
    """The ID of the discussion, for which messages you want to subscribe"""
    discussionId: ID!
  ): DiscussionMessage
  notificationCreated: Notification
  onProposalChange(
    """The ID of the proposal that you wish to subscribe to"""
    proposalId: ID!
  ): Proposal
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

type User {
  """The date, at which the item was created"""
  createdAt: DateTime!
  discussionSubscriptions(orderBy: DiscussionSubscriptionOrderByInput, skip: Int = 0, take: Int = 10): [DiscussionSubscription!]!

  """The display name of the user"""
  displayName: String!

  """The email of the user"""
  email: String!

  """List of events, that occurred and are related to this user"""
  events(orderBy: EventOrderByInput, skip: Int = 0, take: Int = 10): [Event!]!

  """The first name of the user"""
  firstName: String!

  """The system Id of the user"""
  id: ID!

  """The last name of the user"""
  lastName: String!
  notificationTokens: [UserNotificationToken!]!
  notifications(cursor: NotificationWhereUniqueInput, orderBy: NotificationOrderByInput = {createdAt: desc}, skip: Int, take: Int = 10): [Notification!]!

  """List of all the users permissions"""
  permissions: [String!]!
  photo: String!
  proposals(skip: Int = 0, take: Int = 10, where: ProposalWhereInput): [Proposal!]!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

type UserNotificationToken implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String!

  """The main identifier of the item"""
  id: UUID!
  lastUsed: DateTime!
  lastVerified: DateTime!
  state: UserNotificationTokenState!
  token: String!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum UserNotificationTokenState {
  Active
  Expired
  Voided
}

scalar Void

type Vote {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum VoteOutcome {
  Approve
  Condemn
}
