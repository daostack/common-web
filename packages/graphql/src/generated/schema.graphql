### This file was generated by Nexus Schema
### Do not make changes to this file directly


input ActOnReportInput {
  action: ReportAction!
  reportId: UUID!
}

interface Address {
  city: String!
  country: String!
  district: String
  line1: String
  line2: String
  postalCode: String!
}

interface BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: UUID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

input BillingDetailsInput {
  city: String!
  country: String!
  district: String
  line1: String!
  line2: String
  name: String!
  postalCode: String!
}

type Card {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

type Common {
  action: String
  activeFundingProposals: Int!
  activeJoinProposals: Int!
  activeProposals: Int!

  """The current available funds of the common. In cents"""
  balance: Int!
  byline: String

  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String
  discussions(skip: Int, take: Int): [Discussion!]!

  """List of events, that occurred in a common"""
  events(orderBy: EventOrderByInput, skip: Int = 0, take: Int = 10): [Event!]!

  """The minimum amount that the join request should provide. In cents"""
  fundingMinimumAmount: Int!
  fundingType: FundingType!

  """The main identifier of the item"""
  id: ID!
  image: String!
  links: JSON
  members(orderBy: CommonMemberOrderByInput, skip: Int, take: Int): [CommonMember]!

  """The name of the common as provided"""
  name: String!

  """List of payments made for funding this common"""
  payments(paginate: PaginateInput = {skip: 0, take: 10}, where: PaymentsWhereInput): [Payment!]!
  proposals(paginate: PaginateInput, where: ProposalWhereInput): [Proposal!]!

  """The total amount of money that the common has raised. In cents"""
  raised: Int!
  reports(where: ReportWhereInput = {status: {in: [Active]}}): [Report!]!
  rules: JSON

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  updates: [CommonUpdate!]!

  """The whitelisting state of a common"""
  whitelisted: Boolean!
}

input CommonLinkInput {
  title: String!
  url: String!
}

type CommonMember implements BaseEntity {
  common: Common
  commonId: ID!

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: UUID!
  proposals(skip: Int = 0, take: Int = 10, where: ProposalWhereInput): [Proposal!]!
  roles: [CommonMemberRole!]!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  user: User
  userId: ID!
}

input CommonMemberOrderByInput {
  createdAt: SortOrder!
}

enum CommonMemberRole {
  Founder
  Moderator
}

input CommonRuleInput {
  description: String
  title: String!
}

type CommonSubscription implements BaseEntity {
  amount: Int!
  chargedAt: DateTime!
  common: Common!

  """The date, at which the item was created"""
  createdAt: DateTime!
  dueDate: DateTime!

  """The main identifier of the item"""
  id: UUID!
  paymentStatus: SubscriptionPaymentStatus!
  status: SubscriptionStatus!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  voided: Boolean!
}

type CommonUpdate implements BaseEntity {
  change: JSON
  commonAfter: Common!
  commonBefore: Common!

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: UUID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

input CommonWhereInput {
  id: StringFilter
  name: StringFilter
}

input CommonWhereUniqueInput {
  id: ID!
}

enum Country {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SY
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  Unknown
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  YT
  ZA
  ZM
  ZW
}

input CreateCardInput {
  billingDetails: BillingDetailsInput!

  """The sensitive part of the card as encrypted card"""
  encryptedData: String!
  expMonth: Int!
  expYear: Int!

  """The ID of the key used for the encryption of the sensitive data"""
  keyId: String!
}

input CreateCommonInput {
  action: String
  byline: String
  description: String
  fundingMinimumAmount: Int!
  fundingType: FundingType!
  image: String!
  links: [CommonLinkInput!]
  name: String!
  rules: [CommonRuleInput!]
}

input CreateDiscussionInput {
  """The ID of the common, for which we are creating the discussion"""
  commonId: ID!

  """Short description about the topic"""
  description: String!

  """The ID of the proposal, if this is proposal discussion"""
  proposalId: ID

  """The topic of the discussion to be created"""
  topic: String!
}

input CreateDiscussionMessageInput {
  """The ID of the discussion, for which we are creating the message"""
  discussionId: ID!

  """The message itself"""
  message: String!
}

input CreateFundingProposalInput {
  amount: Int!
  commonId: ID!
  description: String!
  files: [ProposalFileInput!]
  images: [ProposalImageInput!]
  links: [ProposalLinkInput!]
  title: String!
}

input CreateJoinProposalInput {
  cardId: String!
  commonId: String!
  description: String!
  fundingAmount: Int!
  links: [LinkInput!]
  title: String!
}

input CreateNotificationEventSettingsInput {
  description: String!
  onEvent: EventType!
  sendNotificationType: NotificationType!
  sendToCommon: Boolean!
  sendToEveryone: Boolean!
  sendToUser: Boolean!
}

input CreateNotificationTemplateInput {
  content: String!
  forType: NotificationType!
  fromEmail: String
  fromName: String
  language: NotificationLanguage!
  subject: String!
  templateType: NotificationTemplateType!
}

input CreatePayoutInput {
  description: String
  proposalIds: [ID!]!
  wireId: ID!
}

input CreateReportInput {
  for: ReportFor!
  messageId: UUID
  note: String!
  proposalId: UUID
  type: ReportType!
}

input CreateRoleInput {
  description: String!
  displayName: String!
  name: String!
  permissions: [String!]!
}

input CreateUserBillingDetailsInput {
  city: String!
  country: Country!
  district: String
  line1: String!
  line2: String
  name: String!
  postalCode: String!
}

input CreateUserInput {
  country: Country!
  email: String!
  firstName: String!
  intro: String
  lastName: String!
  photo: String!
}

input CreateUserNotificationTokenInput {
  description: String!
  token: String!
}

input CreateVoteInput {
  outcome: VoteOutcome!

  """The ID of the root of the proposal whether it is funding one or join"""
  proposalId: ID!
}

input CreateWireBankAccountInput {
  bankName: String!
  city: String!
  country: Country!
  district: String
  line1: String
  line2: String
  postalCode: String!
}

input CreateWireInput {
  accountNumber: String
  billingDetailsId: String
  createBillingDetails: CreateUserBillingDetailsInput
  createWireBankDetails: CreateWireBankAccountInput
  iban: String
  routingNumber: String
  userId: String!
  wireBankDetailsId: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Discussion implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """Short description of the topic"""
  description: String!

  """The main identifier of the item"""
  id: UUID!

  """The date at which the last message on the discussion was added"""
  latestMessage: DateTime!
  messageCount: Int!
  messages(orderBy: DiscussionMessagesOrderByInput = {createdAt: asc}, skip: Int = 0, take: Int = 10): [DiscussionMessage!]!

  """The discussion creator"""
  owner: User

  """What this discussion is about"""
  topic: String!
  type: DiscussionType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  userId: String!
}

type DiscussionMessage implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!
  flag: ReportFlag!

  """The main identifier of the item"""
  id: UUID!
  message: String!
  owner: User!
  reports: [Report!]!
  type: DiscussionMessageType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  userId: String!
}

enum DiscussionMessageType {
  Message
}

input DiscussionMessagesOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

type DiscussionSubscription implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!
  discussion: Discussion!
  discussionId: UUID!

  """The main identifier of the item"""
  id: UUID!
  type: DiscussionSubscriptionType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  userId: String!
}

input DiscussionSubscriptionOrderByInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum DiscussionSubscriptionType {
  AllNotifications
  NoNotification
  OnlyMentions
}

enum DiscussionType {
  CommonDiscussion
  ProposalDiscussion
}

input DiscussionWhereInput {
  commonId: UUID
  commonMemberId: UUID
  userId: ID
}

type EncryptionKey {
  keyId: String!
  publicKey: String!
}

type Event {
  """The ID of the common, for whom the event was created"""
  commonId: ID

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: ID!
  payload: JSON

  """The Types of the event in one of the predefined event types"""
  type: EventType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!

  """The event creator"""
  user: User

  """The ID of the event creator"""
  userId: ID
}

input EventOrderByInput {
  createdAt: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum EventType {
  CardCreated
  CardCvvVerificationFailed
  CardCvvVerificationPassed
  CommonBalanceUpdated
  CommonCreated
  CommonDelisted
  CommonMemberCreated
  CommonMemberRoleAdded
  CommonMemberRoleRemoved
  CommonUpdated
  CommonWhitelisted
  DailyStatisticCreated
  DiscussionCreated
  DiscussionMessageCreated
  DiscussionSubscriptionCreated
  DiscussionSubscriptionTypeChanged
  FundingRequestAccepted
  FundingRequestCreated
  FundingRequestRejected
  HourlyStatisticCreated
  JoinRequestAccepted
  JoinRequestCreated
  JoinRequestRejected
  NotificationTemplateCreated
  NotificationTemplateUpdated
  PaymentCreated
  PaymentFailed
  PaymentSucceeded
  PayoutApprovalGiven
  PayoutApproved
  PayoutApproverCreated
  PayoutCompleted
  PayoutCreated
  PayoutExecuted
  PayoutRejected
  PayoutRejectionGiven
  ProposalExpired
  ProposalMajorityReached
  ReportCreated
  ReportDismissed
  ReportRespected
  RoleCreated
  RoleDeleted
  RolePermissionAdded
  RolePermissionRemoved
  RoleUpdated
  UserAddedToRole
  UserCreated
  UserNotificationTokenCreated
  UserNotificationTokenExpired
  UserNotificationTokenRefreshed
  UserNotificationTokenVoided
  UserRemovedFromRole
  UserUpdated
  VoteCreated
  WireCreated
  WireUpdated
}

type FundingProposal implements BaseEntity {
  """The amount that the proposal has requested in cents"""
  amount: Int!

  """The date, at which the item was created"""
  createdAt: DateTime!
  fundingState: FundingState!

  """The main identifier of the item"""
  id: UUID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

input FundingProposalWhereInput {
  fundingState: FundingState
}

enum FundingState {
  Eligible
  NotEligible
  Redeemed
}

"""The funding Types of the common"""
enum FundingType {
  Monthly
  OneTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JoinProposal implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """
  The amount that this join proposal will contribute to the common. In cents
  """
  funding: Int!
  fundingType: FundingType!

  """The main identifier of the item"""
  id: UUID!
  paymentState: PaymentState!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

type Link {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

input LinkInput {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

type Mutation {
  actOnReport(input: ActOnReportInput!): Report
  approvePayout(outcome: PayoutApproverResponse!, payoutId: ID!): PayoutApprover
  assignRole(roleId: ID!, userId: ID!): Void
  changeDiscussionSubscriptionType(
    """The ID of the discussion subscription to change"""
    id: ID!

    """The new subscription Types"""
    type: DiscussionSubscriptionType!
  ): DiscussionSubscription
  createCard(input: CreateCardInput!): Card!
  createCommon(input: CreateCommonInput!): Common!
  createDiscussion(input: CreateDiscussionInput!): Discussion!
  createDiscussionMessage(input: CreateDiscussionMessageInput!): DiscussionMessage!
  createFundingProposal(input: CreateFundingProposalInput!): Proposal!

  """Create new proposal of Types JOIN."""
  createJoinProposal(input: CreateJoinProposalInput!): Proposal!
  createNotificationEventSettings(input: CreateNotificationEventSettingsInput!): NotificationEventSettings
  createNotificationTemplate(input: CreateNotificationTemplateInput!): NotificationTemplate
  createPayout(input: CreatePayoutInput!): Payout
  createReport(input: CreateReportInput!): Report!
  createRole(input: CreateRoleInput!): Role

  """Creates new user in the settings"""
  createUser(input: CreateUserInput!): User!
  createUserBillingDetails(input: CreateUserBillingDetailsInput!): UserBillingDetails
  createUserNotificationToken(input: CreateUserNotificationTokenInput!): UserNotificationToken!
  createVote(input: CreateVoteInput!): Vote!
  createWire(input: CreateWireInput!): Wire
  createWireBankAccount(input: CreateWireBankAccountInput!): WireBankAccount
  deleteEventNotificationSetting(id: ID!): Boolean
  delistCommon(commonId: String!): Boolean
  finalizeProposal(proposalId: ID!): Boolean!
  forceUpdateStatistics: Boolean
  unassignRole(roleId: ID!, userId: ID!): Void
  updateCommon(input: UpdateCommonInput!): Common
  updateNotificationSettings(input: UpdateNotificationSettingsInput!): NotificationSystemSettings
  updateNotificationTemplate(input: UpdateNotificationTemplateInput!): NotificationTemplate
  updateUser(input: UpdateUserInput!): User
  voidUserNotificationToken(tokenId: ID!): UserNotificationToken!
  whitelistCommon(commonId: String!): Boolean
}

type Notification implements BaseEntity {
  """The linked common. Expensive operation that may return null"""
  common: Common

  """The ID of the linked common. May be null"""
  commonId: UUID

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The linked discussion. Expensive operation that may return null"""
  discussion: Discussion

  """The ID of the linked discussion. May be null"""
  discussionId: UUID

  """The main identifier of the item"""
  id: UUID!

  """The linked proposal. Expensive operation that may return null"""
  proposal: Proposal

  """The ID of the linked proposal. May be null"""
  proposalId: UUID
  seenStatus: NotificationSeenStatus!

  """Whether the notification should be shown in the user notification feed"""
  show: Boolean!
  type: NotificationType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!

  """The linked user. Expensive operation"""
  user: User!

  """The ID of the linked user"""
  userId: UUID!
}

type NotificationEventOptions {
  availableEvents: [EventType!]!
  availableNotifications: [NotificationType!]!
}

type NotificationEventSettings implements BaseEntity {
  active: Boolean!

  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String!

  """The main identifier of the item"""
  id: UUID!
  onEvent: EventType!
  sendNotificationType: NotificationType!
  sendToCommon: Boolean!
  sendToEveryone: Boolean!
  sendToUser: Boolean!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum NotificationLanguage {
  BG
  EN
  HE
  JP
  KO
  RU
}

input NotificationOrderByInput {
  createdAt: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

enum NotificationSeenStatus {
  Done
  NotSeen
  Seen
}

input NotificationSettingsWhereInput {
  """The Types of the notification"""
  type: NotificationType
}

type NotificationSystemSettings implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: UUID!
  sendEmail: Boolean!
  sendPush: Boolean!
  showInUserFeed: Boolean!
  type: NotificationType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

type NotificationTemplate implements BaseEntity {
  bcc: String
  bccName: String
  content: String!

  """The date, at which the item was created"""
  createdAt: DateTime!
  forType: NotificationType!
  from: String
  fromName: String

  """The main identifier of the item"""
  id: UUID!
  language: NotificationLanguage!
  subject: String!
  templateType: NotificationTemplateType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

type NotificationTemplateOptions {
  languages: [NotificationLanguage]!
  notificationTypes: [NotificationType]!
  templateTypes: [NotificationTemplateType]!
}

enum NotificationTemplateType {
  EmailNotification
  PushNotification
}

input NotificationTemplateWhereInput {
  forType: NotificationType
  language: NotificationLanguage
  type: NotificationTemplateType
}

enum NotificationType {
  FundingRequestAccepted
  FundingRequestRejected
  General
  JoinRequestAccepted
  JoinRequestRejected
}

input NotificationWhereInput {
  commonId: UUID
  discussionId: UUID
  proposalId: UUID
  seenStatus: NotificationSeenStatus
  type: NotificationType
  userId: ID
}

input NotificationWhereUniqueInput {
  id: UUID
}

input PaginateInput {
  skip: Int! = 0
  take: Int!
}

type Payment implements BaseEntity {
  """The amount of the payment in US dollar cents"""
  amount: Int
  circlePaymentId: String
  circlePaymentStatus: PaymentCircleStatus
  common: Common!
  commonId: String!

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The payment fees in US dollar cents"""
  fees: Int

  """The main identifier of the item"""
  id: UUID!
  processed: Boolean!
  processedError: Boolean!
  status: PaymentStatus!
  type: PaymentType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum PaymentCircleStatus {
  confirmed
  failed
  paid
  pending
}

enum PaymentState {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}

enum PaymentStatus {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}

enum PaymentType {
  ImportedPayment
  OneTimePayment
  SubscriptionInitialPayment
  SubscriptionSequentialPayment
}

input PaymentsWhereInput {
  commonId: UUID
  userId: UUID
}

type Payout implements BaseEntity {
  amount: Int!

  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String!

  """The main identifier of the item"""
  id: UUID!
  proposals: [Proposal!]!
  status: PayoutStatus!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  wire: Wire!
}

type PayoutApprover implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: UUID!
  outcome: PayoutApproverResponse!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  userId: ID!
}

input PayoutApproverFilter {
  every: PayoutApproversWhereInput
  none: PayoutApproversWhereInput
  some: PayoutApproversWhereInput
}

enum PayoutApproverResponse {
  Approved
  Declined
  Pending
}

input PayoutApproversWhereInput {
  id: StringFilter
  outcome: PayoutApproverResponse
  userId: StringFilter
}

enum PayoutStatus {
  CircleComplete
  CircleFailed
  CirclePending
  Failed
  PendingApproval
}

input PayoutStatusFilter {
  equals: PayoutStatus
  in: [PayoutStatus]
  not: PayoutStatus
  notIn: [PayoutStatus]
}

input PayoutWhereInput {
  approvers: PayoutApproverFilter

  """
  Find all pending payouts where the currently sign in user has to give approval
  """
  isPendingApprover: Boolean
  status: PayoutStatusFilter
}

type Proposal {
  canVote: Boolean!
  common: Common!
  commonId: UUID!

  """The ID of the membership of the user who created the proposal"""
  commonMemberId: UUID!

  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String
  discussions(skip: Int, take: Int): [Discussion!]!
  expiresAt: DateTime!
  files: JSON
  flag: ReportFlag!
  funding: FundingProposal
  fundingId: UUID

  """The main identifier of the item"""
  id: ID!
  images: JSON

  """The IP from which the proposal was created"""
  ipAddress: String
  join: JoinProposal
  joinId: UUID
  links: JSON
  member: CommonMember!
  state: ProposalState!
  title: String
  type: ProposalType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  user: User!

  """The ID of the user who created the proposal"""
  userId: ID!
  votes: [Vote!]!
  votesAgainst: Int!
  votesFor: Int!
}

input ProposalFileInput {
  value: String!
}

input ProposalImageInput {
  value: String!
}

input ProposalLinkInput {
  title: String!
  url: String!
}

enum ProposalState {
  Accepted
  AcceptedButInsufficientFunding
  Countdown
  Finalizing
  Rejected
}

enum ProposalType {
  FundingRequest
  JoinRequest
}

input ProposalWhereInput {
  AND: [ProposalWhereInput!]
  OR: [ProposalWhereInput!]
  commonId: UUID
  commonMemberId: UUID
  description: StringFilter
  id: StringFilter
  state: ProposalState
  title: StringFilter
  type: ProposalType
  userId: ID
}

input ProposalWhereUniqueInput {
  id: UUID!
}

type Query {
  common(where: CommonWhereUniqueInput!): Common
  commons(paginate: PaginateInput, where: CommonWhereInput): [Common]
  discussion(id: ID!): Discussion
  discussions(paginate: PaginateInput, where: DiscussionWhereInput): [Discussion]
  events(paginate: PaginateInput): [Event]
  generateUserAuthToken(authId: String!): String!
  notificationEventOptions: NotificationEventOptions
  notificationEventSettings(paginate: PaginateInput!): [NotificationEventSettings]
  notificationSettings(where: NotificationSettingsWhereInput): [NotificationSystemSettings]
  notificationTemplateOptions: NotificationTemplateOptions
  notificationTemplates(paginate: PaginateInput, where: NotificationTemplateWhereInput): [NotificationTemplate]

  """List of all notifications, readable only by the admin"""
  notifications(paginate: PaginateInput!): [Notification]
  payment(id: ID): Payment
  payments(paginate: PaginateInput, where: PaymentsWhereInput): [Payment]
  payout(id: ID!): Payout
  payouts(paginate: PaginateInput = {skip: 0, take: 10}, where: PayoutWhereInput): [Payout]
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(fundingWhere: FundingProposalWhereInput, paginate: PaginateInput, where: ProposalWhereInput): [Proposal]!
  report(id: ID!): Report
  reports(pagination: PaginateInput, where: ReportWhereInput): [Report]
  role(where: RoleWhereUniqueInput!): Role
  roles(paginate: PaginateInput): [Role]
  settings: Settings!
  statistics(where: StatisticsWhereInput): [Statistic]

  """
  Provide ID to fetch specific user or do not pass anything to get the currently authenticated user
  """
  user(where: UserWhereUniqueInput): User
  users(paginate: PaginateInput, where: UserWhereInput): [User]
  wires(where: WireWhereInput): [Wire]
}

type Report implements BaseEntity {
  """The type of action that this done after the report review"""
  action: ReportAction

  """The date, at which the item was created"""
  createdAt: DateTime!

  """The Types of violation that this report is for"""
  for: ReportFor!

  """The main identifier of the item"""
  id: UUID!
  message: DiscussionMessage
  messageId: UUID

  """The note that the report has left for the content"""
  note: String!
  proposal: Proposal
  proposalId: UUID
  reporter: User!
  reporterId: ID!
  reviewAuthority: ReportAuditor

  """The date on which the report was last reviewed if reviewed"""
  reviewedOn: DateTime
  reviewer: User
  reviewerId: ID

  """The current status of the report"""
  status: ReportStatus!

  """The type of the report"""
  type: ReportType!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum ReportAction {
  Dismissed
  Respected
}

enum ReportAuditor {
  CommonModerator
  SystemAdmin
}

enum ReportFlag {
  Clear
  Hidden
  Reported
}

enum ReportFor {
  FalseNews
  Harassment
  Hate
  Nudity
  Other
  Spam
  Violance
}

enum ReportStatus {
  Active
  Closed
}

input ReportStatusFilterInput {
  in: [ReportStatus]
  not: [ReportStatus]
}

enum ReportType {
  MessageReport
  ProposalReport
}

input ReportWhereInput {
  for: ReportFor
  status: ReportStatusFilterInput
}

type Role implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String!
  displayName: String!

  """The main identifier of the item"""
  id: UUID!
  name: String!
  permissions: [String!]!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!

  """All the users that bear that role"""
  users: [User!]!
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

"""Setting description about the common application"""
type Settings {
  encryptionKey: EncryptionKey!

  """List of all available permission for roles"""
  permissions: [String]!
}

enum SortOrder {
  asc
  desc
}

type Statistic implements BaseEntity {
  commons: Int!

  """The date, at which the item was created"""
  createdAt: DateTime!
  fundingProposals: Int!

  """The main identifier of the item"""
  id: UUID!
  joinProposals: Int!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  users: Int!
}

enum StatisticType {
  AllTime
  Daily
  Hourly
  Weekly
}

input StatisticsWhereInput {
  type: StatisticType
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  discussionMessageCreated(
    """The ID of the discussion, for which messages you want to subscribe"""
    discussionId: ID!
  ): DiscussionMessage
  notificationCreated: Notification
  onProposalChange(
    """The ID of the proposal that you wish to subscribe to"""
    proposalId: ID!
  ): Proposal
}

enum SubscriptionPaymentStatus {
  AwaitingInitialPayment
  Pending
  Successful
  Unsuccessful
}

enum SubscriptionStatus {
  Active
  CanceledByPaymentFailure
  CanceledByUser
  PaymentFailed
  Pending
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UpdateCommonInput {
  action: String
  byline: String
  commonId: ID!
  description: String
  image: String
  links: [CommonLinkInput!]
  name: String
  rules: [CommonRuleInput!]
}

input UpdateNotificationSettingsInput {
  id: String!
  sendEmail: Boolean
  sendPush: Boolean
  showInUserFeed: Boolean
}

input UpdateNotificationTemplateInput {
  bcc: String
  bccName: String
  content: String
  fromEmail: String
  fromName: String
  id: String!
  subject: String
}

input UpdateUserInput {
  country: Country
  firstName: String

  """The ID of the user to be updated"""
  id: String!
  intro: String
  lastName: String
  notificationLanguage: NotificationLanguage
  photo: String
}

type User {
  billingDetails: [UserBillingDetails!]!

  """List of all commons, that the user is currently part of"""
  commons: [Common!]!

  """The last name of the user"""
  country: Country!

  """The date, at which the item was created"""
  createdAt: DateTime!
  discussionSubscriptions(orderBy: DiscussionSubscriptionOrderByInput, skip: Int = 0, take: Int = 10): [DiscussionSubscription!]!

  """The display name of the user"""
  displayName: String!

  """The email of the user"""
  email: String!

  """List of events, that occurred and are related to this user"""
  events(orderBy: EventOrderByInput, skip: Int = 0, take: Int = 10): [Event!]!

  """The first name of the user"""
  firstName: String!

  """The settings Id of the user"""
  id: ID!
  intro: String

  """The last name of the user"""
  lastName: String!
  notificationTokens: [UserNotificationToken!]!
  notifications(cursor: NotificationWhereUniqueInput, orderBy: NotificationOrderByInput = {createdAt: desc}, skip: Int, take: Int = 10): [Notification!]!

  """List of all the users permissions"""
  permissions: [String!]!
  photo: String!
  proposals(skip: Int = 0, take: Int = 10, where: ProposalWhereInput): [Proposal!]!
  subscriptions: [CommonSubscription!]!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  wires: [Wire!]!
}

type UserBillingDetails implements Address & BaseEntity {
  city: String!
  country: String!

  """The date, at which the item was created"""
  createdAt: DateTime!
  district: String

  """The main identifier of the item"""
  id: UUID!
  line1: String
  line2: String
  name: String!
  postalCode: String!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

type UserNotificationToken implements BaseEntity {
  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String!

  """The main identifier of the item"""
  id: UUID!
  lastUsed: DateTime!
  lastVerified: DateTime!
  state: UserNotificationTokenState!
  token: String!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

enum UserNotificationTokenState {
  Active
  Expired
  Voided
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
}

input UserWhereUniqueInput {
  userId: ID!
}

scalar Void

type Vote {
  """The date, at which the item was created"""
  createdAt: DateTime!

  """The main identifier of the item"""
  id: ID!
  outcome: VoteOutcome!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  voter: CommonMember!
  voterId: ID!
}

enum VoteOutcome {
  Approve
  Condemn
}

type Wire implements BaseEntity {
  circleFingerprint: String
  circleId: String

  """The date, at which the item was created"""
  createdAt: DateTime!
  description: String

  """The main identifier of the item"""
  id: UUID!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
  userId: String!
}

type WireBankAccount implements Address & BaseEntity {
  bankName: String!
  city: String!
  country: String!

  """The date, at which the item was created"""
  createdAt: DateTime!
  district: String

  """The main identifier of the item"""
  id: UUID!
  line1: String
  line2: String
  postalCode: String!

  """The date, at which the item was last modified"""
  updatedAt: DateTime!
}

input WireWhereInput {
  userId: StringFilter
}
