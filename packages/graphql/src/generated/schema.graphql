### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BillingDetailsInput {
  city: String!
  country: String!
  district: String
  line1: String!
  line2: String
  name: String!
  postalCode: String!
}

type Card {
    """The date, at which the item was created"""
    createdAt: DateTime!

    """The main identifier of the item"""
    id: ID!

    """The date, at which the item was last modified"""
    updatedAt: DateTime!
}

type Common {
    """The date, at which the item was created"""
    createdAt: DateTime!

    """List of events, that occurred in a common"""
    events(orderBy: EventOrderByInput, skip: Int = 0, take: Int = 10): [Event!]!

    """The main identifier of the item"""
    id: ID!
    members(orderBy: CommonMemberOrderByInput, skip: Int, take: Int): [CommonMember]!

    """The name of the common as provided"""
    name: String!
    proposals(where: ProposalWhereInput): [Proposal!]!

    """The date, at which the item was last modified"""
    updatedAt: DateTime!

    """The whitelisting state of a common"""
    whitelisted: Boolean!
}

type CommonMember {
  common: Common
  commonId: ID!
  id: ID!
  roles: [CommonMemberRole!]!
  user: User
  userId: ID!
}

input CommonMemberOrderByInput {
  createdAt: SortOrder!
}

enum CommonMemberRole {
  Founder
}

input CommonWhereUniqueInput {
  id: ID!
}

input CreateCardInput {
  billingDetails: BillingDetailsInput!

  """The sensitive part of the card as encrypted card"""
  encryptedData: String!
  expMonth: Int!
  expYear: Int!

  """The ID of the key used for the encryption of the sensitive data"""
  keyId: String!
}

input CreateCommonInput {
    fundingCooldown: DateTime!
    fundingMinimumAmount: Int!
    fundingType: FundingType!
    name: String!
}

input CreateFundingProposalInput {
  amount: Int!
  commonId: ID!
  description: String!
  files: [ProposalFileInput!]
  images: [ProposalImageInput!]
  links: [ProposalLinkInput!]
  title: String!
}

input CreateJoinProposalInput {
  cardId: String!
  commonId: String!
  description: String!
  fundingAmount: Int!
  links: [LinkInput!]
  title: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

input CreateVoteInput {
  outcome: VoteOutcome!

  """The ID of the root of the proposal whether it is funding one or join"""
  proposalId: ID!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Event {
    """The ID of the common, for whom the event was created"""
    commonId: ID

    """The date, at which the item was created"""
    createdAt: DateTime!

    """The main identifier of the item"""
    id: ID!
    payload: JSON

    """The type of the event in one of the predefined event types"""
    type: EventType!

    """The date, at which the item was last modified"""
    updatedAt: DateTime!

    """The ID of the event creator"""
    userId: ID
}

input EventOrderByInput {
  createdAt: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum EventType {
  CardCreated
  CardCvvVerificationFailed
  CardCvvVerificationPassed
  CommonCreated
  CommonMemberCreated
  CommonMemberRoleAdded
  CommonMemberRoleRemoved
  FundingRequestAccepted
  FundingRequestCreated
  FundingRequestRejected
  JoinRequestAccepted
  JoinRequestCreated
  JoinRequestRejected
  PaymentCreated
  PaymentFailed
  PaymentSucceeded
  ProposalExpired
  ProposalMajorityReached
  UserCreated
  VoteCreated
}

type FundingProposal {
    """The date, at which the item was created"""
    createdAt: DateTime!

    """The main identifier of the item"""
    id: ID!

    """The date, at which the item was last modified"""
    updatedAt: DateTime!
}

"""The funding type of the common"""
enum FundingType {
    Monthly
    OneTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JoinProposal {
    """The date, at which the item was created"""
    createdAt: DateTime!

    """The main identifier of the item"""
    id: ID!

    """The date, at which the item was last modified"""
    updatedAt: DateTime!
}

type Link {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

input LinkInput {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

type Mutation {
    createCard(input: CreateCardInput!): Card!
    createCommon(input: CreateCommonInput!): Common!
    createFundingProposal(input: CreateFundingProposalInput!): FundingProposal!

    """Create new proposal of type JOIN."""
    createJoinProposal(input: CreateJoinProposalInput!): JoinProposal!

    """Creates new user in the system"""
    createUser(input: CreateUserInput!): User!
    createVote(input: CreateVoteInput!): Vote!
    finalizeProposal(proposalId: ID!): Boolean!
}

type Proposal {
    """The date, at which the item was created"""
    createdAt: DateTime!

    """The main identifier of the item"""
    id: ID!
    type: ProposalType!

    """The date, at which the item was last modified"""
    updatedAt: DateTime!
}

input ProposalFileInput {
    value: String!
}

input ProposalImageInput {
    value: String!
}

input ProposalLinkInput {
    title: String!
    url: String!
}

enum ProposalType {
    FundingRequest
    JoinRequest
}

input ProposalWhereInput {
    type: ProposalType
}

type Query {
    common(where: CommonWhereUniqueInput!): Common
    generateUserAuthToken(authId: String!): String!

    """
    Provide ID to fetch specific user or do not pass anything to get the currently authenticated user
    """
    user(userId: ID): User
}

enum SortOrder {
    asc
    desc
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    notIn: [String!]
    startsWith: String
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type User {
    """The date, at which the item was created"""
    createdAt: DateTime!

    """The display name of the user"""
    displayName: String!

    """List of events, that occurred and are related to this user"""
    events(orderBy: EventOrderByInput, skip: Int = 0, take: Int = 10): [Event!]!

    """The first name of the user"""
    firstName: String!

    """The system Id of the user"""
    id: ID!

    """The last name of the user"""
    lastName: String!

    """The date, at which the item was last modified"""
    updatedAt: DateTime!
}

type Vote {
    """The date, at which the item was created"""
    createdAt: DateTime!

    """The main identifier of the item"""
    id: ID!

    """The date, at which the item was last modified"""
    updatedAt: DateTime!
}

enum VoteOutcome {
  Approve
  Condemn
}
