### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BillingDetailsInput {
  city: String!
  country: String!
  district: String
  line1: String!
  line2: String
  name: String!
  postalCode: String!
}

type Card {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

type Common {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!
  members(orderBy: CommonMemberOrderByInput, skip: Int, take: Int): [CommonMember]!

  """The name of the common as provided"""
  name: String!

  """The date, at which the item was last modified"""
  updatedAt: Date!

  """The whitelisting state of a common"""
  whitelisted: Boolean!
}

type CommonMember {
  common: Common
  commonId: ID!
  id: ID!
  roles: [CommonMemberRole!]!
  user: User
  userId: ID!
}

input CommonMemberOrderByInput {
  createdAt: SortOrder!
}

enum CommonMemberRole {
  Founder
}

input CommonWhereUniqueInput {
  id: ID!
}

input CreateCardInput {
  billingDetails: BillingDetailsInput!

  """The sensitive part of the card as encrypted card"""
  encryptedData: String!
  expMonth: Int!
  expYear: Int!

  """The ID of the key used for the encryption of the sensitive data"""
  keyId: String!
}

input CreateCommonInput {
  fundingCooldown: Date!
  fundingMinimumAmount: Int!
  fundingType: FundingType!
  name: String!
}

input CreateFundingProposalInput {
  amount: Int!
  commonId: ID!
  description: String!
  files: [ProposalFileInput!]
  images: [ProposalImageInput!]
  links: [ProposalLinkInput!]
  title: String!
}

input CreateJoinProposalInput {
  cardId: String!
  commonId: String!
  description: String!
  fundingAmount: Int!
  links: [LinkInput!]
  title: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

input CreateVoteInput {
  outcome: VoteOutcome!

  """The ID of the root of the proposal whether it is funding one or join"""
  proposalId: ID!
}

scalar Date

type FundingProposal {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

"""The funding type of the common"""
enum FundingType {
  Monthly
  OneTime
}

type JoinProposal {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

type Link {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

input LinkInput {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

type Mutation {
  createCard(input: CreateCardInput!): Card!
  createCommon(input: CreateCommonInput!): Common!
  createFundingProposal(input: CreateFundingProposalInput!): FundingProposal!

  """Create new proposal of type JOIN."""
  createJoinProposal(input: CreateJoinProposalInput!): JoinProposal!

  """Creates new user in the system"""
  createUser(input: CreateUserInput!): User!
  createVote(input: CreateVoteInput!): Vote!
  finalizeProposal(proposalId: ID!): Boolean!
}

input ProposalFileInput {
  value: String!
}

input ProposalImageInput {
  value: String!
}

input ProposalLinkInput {
  title: String!
  url: String!
}

type Query {
  common(where: CommonWhereUniqueInput!): Common
  generateUserAuthToken(authId: String!): String!
}

enum SortOrder {
  asc
  desc
}

type User {
  """The date, at which the item was created"""
  createdAt: Date!

  """The display name of the user"""
  displayName: String!

  """The first name of the user"""
  firstName: String!

  """The system Id of the user"""
  id: ID!

  """The last name of the user"""
  lastName: String!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

type Vote {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

enum VoteOutcome {
  Approve
  Condemn
}
