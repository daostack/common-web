### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Amount {
  amount: String
  currency: String
}

type Balance {
  available: Amount
  unsettled: Amount
}

type Card {
  circleCardId: ID!

  """The date at witch the payment was created"""
  createdAt: Date!

  """The ID of the payment"""
  id: ID!
  metadata: CardMetadata
  ownerId: ID!

  """The date at witch the payment was last updated"""
  updatedAt: Date!
  verification: CardVerification
}

type CardBillingDetails {
  city: String
  country: String
  district: String
  line1: String
  name: String
  postalCode: String
}

type CardMetadata {
  billingDetails: CardBillingDetails
  digits: String
  network: CardNetwork
}

enum CardNetwork {
  mastercard
  visa
}

type CardVerification {
  cvv: String
}

"""The common type"""
type Common {
  """The currently available funds of the common"""
  balance: Int!

  """The date, at which the common was created"""
  createdAt: Date

  """The unique identifier of the common"""
  id: ID!
  members: [CommonMember]
  metadata: CommonMetadata!

  """The display name of the common"""
  name: String!
  openFundingRequests: Int!
  openJoinRequests: Int!
  proposals(page: Int, paymentState: ProposalPaymentState, state: ProposalState, type: ProposalType): [Proposal]

  """The total amount of money, raised by the common"""
  raised: Int!

  """The date, at which the common was last updated"""
  updatedAt: Date
}

enum CommonContributionType {
  monthly
  oneTime
}

type CommonMember {
  """The date, at witch the member joined the common"""
  joinedAt: Date
  user: User

  """The user ID of the member"""
  userId: ID!
}

type CommonMetadata {
  contributionType: CommonContributionType
  founderId: String!
  minFeeToJoin: Int!
}

input CreateIntentionInput {
  intention: String!
  type: IntentionType!
}

scalar Date

type Event {
  """The date, at which the event was created"""
  createdAt: Date!

  """The unique identifier of the event"""
  id: ID!

  """The id of the object on which was acted to created the event"""
  objectId: ID

  """The type of the event"""
  type: EventType!

  """The date, at which the event was last updated"""
  updatedAt: Date!
  user: User

  """The id of the actor"""
  userId: ID
}

enum EventType {
  cardCreated
  commonCreated
  commonCreationFailed
  commonMemberAdded
  commonMemberRemoved
  commonUpdated
  commonWhitelisted
  discussionCreated
  discussionMessageReported
  discussionReported
  fundingRequestAccepted
  fundingRequestAcceptedInsufficientFunds
  fundingRequestCreated
  fundingRequestExecuted
  fundingRequestRejected
  membershipRevoked
  messageCreated
  paymentConfirmed
  paymentCreated
  paymentFailed
  paymentPaid
  payoutApproved
  payoutCompleted
  payoutCreated
  payoutExecuted
  payoutFailed
  payoutVoided
  proposalReported
  requestToJoinAccepted
  requestToJoinCreated
  requestToJoinExecuted
  requestToJoinRejected
  subscriptionCanceledByPaymentFailure
  subscriptionCanceledByUser
  subscriptionCreated
  subscriptionPaymentConfirmed
  subscriptionPaymentCreated
  subscriptionPaymentFailed
  subscriptionPaymentStuck
  voteCreated
}

input ExecutePayoutInput {
  """List of the all proposals IDs that are in this batch"""
  proposalIds: [ID!]!

  """The ID of the the wire to witch the payout will be made"""
  wireId: ID!
}

type Intention {
  createdAt: Date!
  id: ID!
  intention: String!
  type: IntentionType!
  updatedAt: Date!
}

enum IntentionType {
  access
  request
}

type Mutation {
  approvePayout(index: Int!, payoutId: ID!, token: String!): Boolean
  createIntention(input: CreateIntentionInput!): Intention
  executePayouts(input: ExecutePayoutInput!): Payout

  """
  Refresh the common members from the events. Returns the new common member count
  """
  refreshCommonMembers(
    """The common id to refresh"""
    commonId: ID!
  ): Int
  updatePaymentData(id: ID!, trackId: ID = "919d4c7d-1a93-40da-a3c1-59eac6f18ba2"): Boolean
  updatePaymentsCommonId: Boolean
  updatePayoutStatus(payoutId: ID!): Boolean
  updatePayoutsStatus: Boolean
  whitelistCommon(commonId: ID!): Boolean
}

type Payment {
  amount: PaymentAmount!
  card: Card
  circlePaymentId: ID!
  common: Common

  """The date at witch the payment was created"""
  createdAt: Date!

  """The fees on the payment"""
  fees: PaymentFees

  """The ID of the payment"""
  id: ID!
  proposal: Proposal
  proposalId: ID!

  """The source from witch the payment was funded"""
  source: PaymentSource!
  status: PaymentStatus!
  subscription: Subscription
  subscriptionId: ID
  type: PaymentType!

  """The date at witch the payment was last updated"""
  updatedAt: Date!
  user: User
  userId: ID!
}

type PaymentAmount {
  amount: Int
  currency: PaymentCurrency
}

enum PaymentCurrency {
  USD
}

type PaymentFees {
  amount: Int
  currency: PaymentCurrency
}

type PaymentSource {
  id: ID
  type: PaymentSourceType!
}

enum PaymentSourceType {
  card
}

enum PaymentStatus {
  confirmed
  failed
  paid
  pending
}

enum PaymentType {
  oneTime
  subscription
}

type Payout {
  amount: Int!
  circlePayoutId: String
  createdAt: Date!
  executed: Boolean
  id: ID!
  proposalIds: [String]
  proposals: [Proposal]
  security: [PayoutSecurity]
  status: PayoutStatus
  updatedAt: Date!
  voided: Boolean
}

type PayoutSecurity {
  id: Int
  redeemed: Boolean
  redemptionAttempts: Int
}

enum PayoutStatus {
  complete
  failed
  pending
}

"""The proposals type"""
type Proposal {
  common: Common!
  commonId: ID!
  createdAt: Date!
  description: ProposalDescription!

  """
  Details about the funding request. Exists only on funding request proposals
  """
  fundingRequest: ProposalFunding
  fundingState: ProposalFundingState
  id: ID!

  """Details about the join request. Exists only on join request proposals"""
  join: ProposalJoin
  paymentState: ProposalPaymentState
  proposer: User!
  proposerId: ID!
  state: ProposalState!
  type: ProposalType!
  updatedAt: Date!
  votes: [ProposalVote]
  votesAgainst: Int!
  votesFor: Int!
}

type ProposalDescription {
  description: String!
  title: String
}

type ProposalFunding {
  amount: Int!
}

enum ProposalFundingState {
  available
  funded
  notAvailable
  notRelevant
}

type ProposalJoin {
  cardId: ID!
  funding: Int!
  fundingType: CommonContributionType
}

enum ProposalPaymentState {
  confirmed
  failed
  notAttempted
  notRelevant
  pending
}

enum ProposalState {
  countdown
  failed
  passed
  passedInsufficientBalance
}

enum ProposalType {
  fundingRequest
  join
}

type ProposalVote {
  outcome: ProposalVoteOutcome!
  voteId: ID!
  voter: User
  voterId: ID!
}

enum ProposalVoteOutcome {
  approved
  rejected
}

type Query {
  balance: Balance
  common(
    """The ID of the common, that you want to retrieve"""
    commonId: ID!
  ): Common
  commons(after: Int = 0, last: Int = 10): [Common]
  event(eventId: ID!): Event
  events(after: Int = 0, last: Int = 10, objectId: ID, type: EventType): [Event]
  payment(id: ID!): Payment
  payments(hanging: Boolean, page: Int = 1): [Payment]
  payout(id: ID!): Payout
  payouts(page: Int = 1): [Payout]
  proposal(id: ID!): Proposal
  proposals(fundingState: ProposalFundingState, ids: [String], page: Int = 1, pageItems: Int = 10, type: ProposalType): [Proposal]
  statistics: Statistics
  user(id: ID!): User
  users(page: Int = 1, perPage: Int = 10): [User]
  wires(page: Int = 1): [Wire]
}

type Statistics {
  commons: Int
  fundingRequests(onlyOpen: Boolean = false): Int
  joinRequests(onlyOpen: Boolean = false): Int

  """Commons, created on that date"""
  newCommons: Int

  """The amount of new discussion messages, send on that date"""
  newDiscussionMessages: Int

  """The amount of discussions, started on that date"""
  newDiscussions: Int

  """The amount of proposals with funding type, created on that date"""
  newFundingRequests: Int

  """The amount of proposals with join type, created on that date"""
  newJoinRequests: Int
  users: Int
}

type Subscription {
  amount: Int!
  cardId: ID!
  charges: Int!
  createdAt: Date!
  dueDate: Date
  id: ID!
  lastChargedAt: Date
  metadata: SubscriptionMetadata!
  proposalId: ID!
  revoked: Boolean!
  status: SubscriptionStatus!
  updatedAt: Date!
  userId: ID!
}

type SubscriptionMetadata {
  common: SubscriptionMetadataCommon
}

type SubscriptionMetadataCommon {
  id: ID
  name: String
}

enum SubscriptionStatus {
  active
  canceledByPaymentFailure
  canceledByUser
  paymentFailed
  pending
}

type User {
  createdAt: Date
  email: String
  firstName: String
  id: ID!
  lastName: String
  permissions: [String]
  photoURL: String
  proposals(page: Int = 1): [Proposal]
  subscriptions(page: Int = 1, status: SubscriptionStatus): [Subscription]
  tokens: [String]
}

type Wire {
  bank: WireBank
  billingDetails: WireBillingDetailsType
  createdAt: Date
  description: String

  """The local ID of the payout"""
  id: ID!
  updatedAt: Date
}

type WireBank {
  bankName: String
  city: String
  country: String
}

type WireBillingDetailsType {
  city: String
  country: String
  line1: String
  line2: String
  name: String
  postalCode: String
}
