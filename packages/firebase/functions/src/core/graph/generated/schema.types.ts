/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { IRequestContext } from "./../../../core"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateIntentionInput: { // input type
    intention: string; // String!
    type: NexusGenEnums['IntentionType']; // IntentionType!
  }
  ExecutePayoutInput: { // input type
    proposalIds: string[]; // [ID!]!
    wireId: string; // ID!
  }
}

export interface NexusGenEnums {
  CartNetwork: "MASTERCARD" | "VISA"
  CommonContributionType: "monthly" | "one-time"
  EventType: "cardCreated" | "commonCreated" | "commonCreationFailed" | "commonMemberAdded" | "commonMemberRemoved" | "commonUpdated" | "commonWhitelisted" | "discussionCreated" | "fundingRequestAccepted" | "fundingRequestAcceptedInsufficientFunds" | "fundingRequestCreated" | "fundingRequestExecuted" | "fundingRequestRejected" | "membershipRevoked" | "messageCreated" | "paymentConfirmed" | "paymentCreated" | "paymentFailed" | "paymentPaid" | "payoutApproved" | "payoutCompleted" | "payoutCreated" | "payoutExecuted" | "payoutFailed" | "payoutVoided" | "requestToJoinAccepted" | "requestToJoinCreated" | "requestToJoinExecuted" | "requestToJoinRejected" | "subscriptionCanceledByPaymentFailure" | "subscriptionCanceledByUser" | "subscriptionCreated" | "subscriptionPaymentConfirmed" | "subscriptionPaymentCreated" | "subscriptionPaymentFailed" | "subscriptionPaymentStuck" | "voteCreated"
  IntentionType: "access" | "request"
  PaymentCurrency: "USD"
  PaymentSourceType: "card"
  PaymentStatus: "confirmed" | "failed" | "paid" | "pending"
  PaymentType: "one-time" | "subscription"
  PayoutStatus: "complete" | "failed" | "pending"
  ProposalFundingState: "available" | "funded" | "notAvailable" | "notRelevant"
  ProposalPaymentState: "confirmed" | "failed" | "notAttempted" | "notRelevant" | "pending"
  ProposalState: "countdown" | "failed" | "passed" | "passedInsufficientBalance"
  ProposalType: "fundingRequest" | "join"
  ProposalVoteOutcome: "approved" | "rejected"
  SubscriptionStatus: "active" | "canceledByPaymentFailure" | "canceledByUser" | "paymentFailed" | "pending"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  Card: { // root type
    circleCardId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    metadata?: NexusGenRootTypes['CardMetadata'] | null; // CardMetadata
    ownerId: string; // ID!
    updatedAt: NexusGenScalars['Date']; // Date!
    verification?: NexusGenRootTypes['CardVerification'] | null; // CardVerification
  }
  CardBillingDetails: { // root type
    city?: string | null; // String
    country?: string | null; // String
    district?: string | null; // String
    line1?: string | null; // String
    name?: string | null; // String
    postalCode?: string | null; // String
  }
  CardMetadata: { // root type
    billingDetails?: NexusGenRootTypes['CardBillingDetails'] | null; // CardBillingDetails
    digits?: string | null; // String
    network?: NexusGenEnums['CartNetwork'] | null; // CartNetwork
  }
  CardVerification: { // root type
    cvv?: string | null; // String
  }
  Common: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    id: string; // ID!
    metadata: NexusGenRootTypes['CommonMetadata']; // CommonMetadata!
    name: string; // String!
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  CommonMember: { // root type
    joinedAt?: NexusGenScalars['Date'] | null; // Date
    userId: string; // ID!
  }
  CommonMetadata: { // root type
    byline: string; // String!
    contributionType?: NexusGenEnums['CommonContributionType'] | null; // CommonContributionType
    description: string; // String!
    founderId: string; // String!
    minFeeToJoin: number; // Int!
  }
  Event: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    objectId?: string | null; // ID
    type: NexusGenEnums['EventType']; // EventType!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId?: string | null; // ID
  }
  Intention: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    intention: string; // String!
    type: NexusGenEnums['IntentionType']; // IntentionType!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  Mutation: {};
  Payment: { // root type
    amount: NexusGenRootTypes['PaymentAmount']; // PaymentAmount!
    circlePaymentId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    fees?: NexusGenRootTypes['PaymentFees'] | null; // PaymentFees
    id: string; // ID!
    proposalId: string; // ID!
    source: NexusGenRootTypes['PaymentSource']; // PaymentSource!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    subscriptionId?: string | null; // ID
    type: NexusGenEnums['PaymentType']; // PaymentType!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  PaymentAmount: { // root type
    currency?: NexusGenEnums['PaymentCurrency'] | null; // PaymentCurrency
  }
  PaymentFees: { // root type
    amount?: number | null; // Int
    currency?: NexusGenEnums['PaymentCurrency'] | null; // PaymentCurrency
  }
  PaymentSource: { // root type
    id?: string | null; // ID
    type: NexusGenEnums['PaymentSourceType']; // PaymentSourceType!
  }
  Payout: { // root type
    amount: number; // Int!
    circlePayoutId?: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    executed?: boolean | null; // Boolean
    id: string; // ID!
    proposalIds?: Array<string | null> | null; // [String]
    security?: Array<NexusGenRootTypes['PayoutSecurity'] | null> | null; // [PayoutSecurity]
    status?: NexusGenEnums['PayoutStatus'] | null; // PayoutStatus
    updatedAt: NexusGenScalars['Date']; // Date!
    voided?: boolean | null; // Boolean
  }
  PayoutSecurity: { // root type
    id?: number | null; // Int
    redeemed?: boolean | null; // Boolean
    redemptionAttempts?: number | null; // Int
  }
  Proposal: { // root type
    commonId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    description: NexusGenRootTypes['ProposalDescription']; // ProposalDescription!
    fundingRequest?: NexusGenRootTypes['ProposalFunding'] | null; // ProposalFunding
    fundingState?: NexusGenEnums['ProposalFundingState'] | null; // ProposalFundingState
    id: string; // ID!
    join?: NexusGenRootTypes['ProposalJoin'] | null; // ProposalJoin
    paymentState?: NexusGenEnums['ProposalPaymentState'] | null; // ProposalPaymentState
    proposerId: string; // ID!
    state: NexusGenEnums['ProposalState']; // ProposalState!
    type: NexusGenEnums['ProposalType']; // ProposalType!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes?: Array<NexusGenRootTypes['ProposalVote'] | null> | null; // [ProposalVote]
    votesAgainst: number; // Int!
    votesFor: number; // Int!
  }
  ProposalDescription: { // root type
    description: string; // String!
    title?: string | null; // String
  }
  ProposalFunding: { // root type
    amount: number; // Int!
  }
  ProposalJoin: { // root type
    cardId: string; // ID!
    funding: number; // Int!
    fundingType?: NexusGenEnums['CommonContributionType'] | null; // CommonContributionType
  }
  ProposalVote: { // root type
    voteId: string; // ID!
    voterId: string; // ID!
  }
  Query: {};
  Statistics: { // root type
    newCommons?: number | null; // Int
    newDiscussionMessages?: number | null; // Int
    newDiscussions?: number | null; // Int
    newFundingRequests?: number | null; // Int
    newJoinRequests?: number | null; // Int
  }
  Subscription: { // root type
    amount: number; // Int!
    cardId: string; // ID!
    charges: number; // Int!
    createdAt: NexusGenScalars['Date']; // Date!
    dueDate?: NexusGenScalars['Date'] | null; // Date
    id: string; // ID!
    lastChargedAt?: NexusGenScalars['Date'] | null; // Date
    metadata: NexusGenRootTypes['SubscriptionMetadata']; // SubscriptionMetadata!
    proposalId: string; // ID!
    revoked: boolean; // Boolean!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  SubscriptionMetadata: { // root type
    common?: NexusGenRootTypes['SubscriptionMetadataCommon'] | null; // SubscriptionMetadataCommon
  }
  SubscriptionMetadataCommon: { // root type
    id?: string | null; // ID
    name?: string | null; // String
  }
  User: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    email?: string | null; // String
    firstName?: string | null; // String
    lastName?: string | null; // String
    photoURL?: string | null; // String
    tokens?: Array<string | null> | null; // [String]
  }
  Wire: { // root type
    bank?: NexusGenRootTypes['WireBank'] | null; // WireBank
    billingDetails?: NexusGenRootTypes['WireBillingDetailsType'] | null; // WireBillingDetailsType
    createdAt?: NexusGenScalars['Date'] | null; // Date
    description?: string | null; // String
    id: string; // ID!
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  WireBank: { // root type
    bankName?: string | null; // String
    city?: string | null; // String
    country?: string | null; // String
  }
  WireBillingDetailsType: { // root type
    city?: string | null; // String
    country?: string | null; // String
    line1?: string | null; // String
    line2?: string | null; // String
    name?: string | null; // String
    postalCode?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Card: { // field return type
    circleCardId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    metadata: NexusGenRootTypes['CardMetadata'] | null; // CardMetadata
    ownerId: string; // ID!
    updatedAt: NexusGenScalars['Date']; // Date!
    verification: NexusGenRootTypes['CardVerification'] | null; // CardVerification
  }
  CardBillingDetails: { // field return type
    city: string | null; // String
    country: string | null; // String
    district: string | null; // String
    line1: string | null; // String
    name: string | null; // String
    postalCode: string | null; // String
  }
  CardMetadata: { // field return type
    billingDetails: NexusGenRootTypes['CardBillingDetails'] | null; // CardBillingDetails
    digits: string | null; // String
    network: NexusGenEnums['CartNetwork'] | null; // CartNetwork
  }
  CardVerification: { // field return type
    cvv: string | null; // String
  }
  Common: { // field return type
    balance: number; // Int!
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string; // ID!
    members: Array<NexusGenRootTypes['CommonMember'] | null> | null; // [CommonMember]
    metadata: NexusGenRootTypes['CommonMetadata']; // CommonMetadata!
    name: string; // String!
    openFundingRequests: number; // Int!
    openJoinRequests: number; // Int!
    proposals: Array<NexusGenRootTypes['Proposal'] | null> | null; // [Proposal]
    raised: number; // Int!
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  CommonMember: { // field return type
    joinedAt: NexusGenScalars['Date'] | null; // Date
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // ID!
  }
  CommonMetadata: { // field return type
    byline: string; // String!
    contributionType: NexusGenEnums['CommonContributionType'] | null; // CommonContributionType
    description: string; // String!
    founderId: string; // String!
    minFeeToJoin: number; // Int!
  }
  Event: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    objectId: string | null; // ID
    type: NexusGenEnums['EventType']; // EventType!
    updatedAt: NexusGenScalars['Date']; // Date!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // ID
  }
  Intention: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    intention: string; // String!
    type: NexusGenEnums['IntentionType']; // IntentionType!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  Mutation: { // field return type
    createIntention: NexusGenRootTypes['Intention'] | null; // Intention
    executePayouts: NexusGenRootTypes['Payout'] | null; // Payout
  }
  Payment: { // field return type
    amount: NexusGenRootTypes['PaymentAmount']; // PaymentAmount!
    card: NexusGenRootTypes['Card'] | null; // Card
    circlePaymentId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    fees: NexusGenRootTypes['PaymentFees'] | null; // PaymentFees
    id: string; // ID!
    proposal: NexusGenRootTypes['Proposal'] | null; // Proposal
    proposalId: string; // ID!
    source: NexusGenRootTypes['PaymentSource']; // PaymentSource!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    subscription: NexusGenRootTypes['Subscription'] | null; // Subscription
    subscriptionId: string | null; // ID
    type: NexusGenEnums['PaymentType']; // PaymentType!
    updatedAt: NexusGenScalars['Date']; // Date!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // ID!
  }
  PaymentAmount: { // field return type
    amount: number | null; // Int
    currency: NexusGenEnums['PaymentCurrency'] | null; // PaymentCurrency
  }
  PaymentFees: { // field return type
    amount: number | null; // Int
    currency: NexusGenEnums['PaymentCurrency'] | null; // PaymentCurrency
  }
  PaymentSource: { // field return type
    id: string | null; // ID
    type: NexusGenEnums['PaymentSourceType']; // PaymentSourceType!
  }
  Payout: { // field return type
    amount: number; // Int!
    circlePayoutId: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    executed: boolean | null; // Boolean
    id: string; // ID!
    proposalIds: Array<string | null> | null; // [String]
    proposals: Array<NexusGenRootTypes['Proposal'] | null> | null; // [Proposal]
    security: Array<NexusGenRootTypes['PayoutSecurity'] | null> | null; // [PayoutSecurity]
    status: NexusGenEnums['PayoutStatus'] | null; // PayoutStatus
    updatedAt: NexusGenScalars['Date']; // Date!
    voided: boolean | null; // Boolean
  }
  PayoutSecurity: { // field return type
    id: number | null; // Int
    redeemed: boolean | null; // Boolean
    redemptionAttempts: number | null; // Int
  }
  Proposal: { // field return type
    common: NexusGenRootTypes['Common']; // Common!
    commonId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    description: NexusGenRootTypes['ProposalDescription']; // ProposalDescription!
    fundingRequest: NexusGenRootTypes['ProposalFunding'] | null; // ProposalFunding
    fundingState: NexusGenEnums['ProposalFundingState'] | null; // ProposalFundingState
    id: string; // ID!
    join: NexusGenRootTypes['ProposalJoin'] | null; // ProposalJoin
    paymentState: NexusGenEnums['ProposalPaymentState'] | null; // ProposalPaymentState
    proposer: NexusGenRootTypes['User']; // User!
    proposerId: string; // ID!
    state: NexusGenEnums['ProposalState']; // ProposalState!
    type: NexusGenEnums['ProposalType']; // ProposalType!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes: Array<NexusGenRootTypes['ProposalVote'] | null> | null; // [ProposalVote]
    votesAgainst: number; // Int!
    votesFor: number; // Int!
  }
  ProposalDescription: { // field return type
    description: string; // String!
    title: string | null; // String
  }
  ProposalFunding: { // field return type
    amount: number; // Int!
  }
  ProposalJoin: { // field return type
    cardId: string; // ID!
    funding: number; // Int!
    fundingType: NexusGenEnums['CommonContributionType'] | null; // CommonContributionType
  }
  ProposalVote: { // field return type
    outcome: NexusGenEnums['ProposalVoteOutcome']; // ProposalVoteOutcome!
    voteId: string; // ID!
    voter: NexusGenRootTypes['User'] | null; // User
    voterId: string; // ID!
  }
  Query: { // field return type
    common: NexusGenRootTypes['Common'] | null; // Common
    commons: Array<NexusGenRootTypes['Common'] | null> | null; // [Common]
    event: NexusGenRootTypes['Event'] | null; // Event
    events: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    payment: NexusGenRootTypes['Payment'] | null; // Payment
    payments: Array<NexusGenRootTypes['Payment'] | null> | null; // [Payment]
    payout: NexusGenRootTypes['Payout'] | null; // Payout
    payouts: Array<NexusGenRootTypes['Payout'] | null> | null; // [Payout]
    proposal: NexusGenRootTypes['Proposal'] | null; // Proposal
    proposals: Array<NexusGenRootTypes['Proposal'] | null> | null; // [Proposal]
    statistics: NexusGenRootTypes['Statistics'] | null; // Statistics
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    wires: Array<NexusGenRootTypes['Wire'] | null> | null; // [Wire]
  }
  Statistics: { // field return type
    commons: number | null; // Int
    fundingRequests: number | null; // Int
    joinRequests: number | null; // Int
    newCommons: number | null; // Int
    newDiscussionMessages: number | null; // Int
    newDiscussions: number | null; // Int
    newFundingRequests: number | null; // Int
    newJoinRequests: number | null; // Int
    users: number | null; // Int
  }
  Subscription: { // field return type
    amount: number; // Int!
    cardId: string; // ID!
    charges: number; // Int!
    createdAt: NexusGenScalars['Date']; // Date!
    dueDate: NexusGenScalars['Date'] | null; // Date
    id: string; // ID!
    lastChargedAt: NexusGenScalars['Date'] | null; // Date
    metadata: NexusGenRootTypes['SubscriptionMetadata']; // SubscriptionMetadata!
    proposalId: string; // ID!
    revoked: boolean; // Boolean!
    status: NexusGenEnums['SubscriptionStatus']; // SubscriptionStatus!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  SubscriptionMetadata: { // field return type
    common: NexusGenRootTypes['SubscriptionMetadataCommon'] | null; // SubscriptionMetadataCommon
  }
  SubscriptionMetadataCommon: { // field return type
    id: string | null; // ID
    name: string | null; // String
  }
  User: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    email: string | null; // String
    firstName: string | null; // String
    id: string; // ID!
    lastName: string | null; // String
    permissions: Array<string | null> | null; // [String]
    photoURL: string | null; // String
    proposals: Array<NexusGenRootTypes['Proposal'] | null> | null; // [Proposal]
    subscriptions: Array<NexusGenRootTypes['Subscription'] | null> | null; // [Subscription]
    tokens: Array<string | null> | null; // [String]
  }
  Wire: { // field return type
    bank: NexusGenRootTypes['WireBank'] | null; // WireBank
    billingDetails: NexusGenRootTypes['WireBillingDetailsType'] | null; // WireBillingDetailsType
    createdAt: NexusGenScalars['Date'] | null; // Date
    description: string | null; // String
    id: string; // ID!
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  WireBank: { // field return type
    bankName: string | null; // String
    city: string | null; // String
    country: string | null; // String
  }
  WireBillingDetailsType: { // field return type
    city: string | null; // String
    country: string | null; // String
    line1: string | null; // String
    line2: string | null; // String
    name: string | null; // String
    postalCode: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Card: { // field return type name
    circleCardId: 'ID'
    createdAt: 'Date'
    id: 'ID'
    metadata: 'CardMetadata'
    ownerId: 'ID'
    updatedAt: 'Date'
    verification: 'CardVerification'
  }
  CardBillingDetails: { // field return type name
    city: 'String'
    country: 'String'
    district: 'String'
    line1: 'String'
    name: 'String'
    postalCode: 'String'
  }
  CardMetadata: { // field return type name
    billingDetails: 'CardBillingDetails'
    digits: 'String'
    network: 'CartNetwork'
  }
  CardVerification: { // field return type name
    cvv: 'String'
  }
  Common: { // field return type name
    balance: 'Int'
    createdAt: 'Date'
    id: 'ID'
    members: 'CommonMember'
    metadata: 'CommonMetadata'
    name: 'String'
    openFundingRequests: 'Int'
    openJoinRequests: 'Int'
    proposals: 'Proposal'
    raised: 'Int'
    updatedAt: 'Date'
  }
  CommonMember: { // field return type name
    joinedAt: 'Date'
    user: 'User'
    userId: 'ID'
  }
  CommonMetadata: { // field return type name
    byline: 'String'
    contributionType: 'CommonContributionType'
    description: 'String'
    founderId: 'String'
    minFeeToJoin: 'Int'
  }
  Event: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    objectId: 'ID'
    type: 'EventType'
    updatedAt: 'Date'
    user: 'User'
    userId: 'ID'
  }
  Intention: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    intention: 'String'
    type: 'IntentionType'
    updatedAt: 'Date'
  }
  Mutation: { // field return type name
    createIntention: 'Intention'
    executePayouts: 'Payout'
  }
  Payment: { // field return type name
    amount: 'PaymentAmount'
    card: 'Card'
    circlePaymentId: 'ID'
    createdAt: 'Date'
    fees: 'PaymentFees'
    id: 'ID'
    proposal: 'Proposal'
    proposalId: 'ID'
    source: 'PaymentSource'
    status: 'PaymentStatus'
    subscription: 'Subscription'
    subscriptionId: 'ID'
    type: 'PaymentType'
    updatedAt: 'Date'
    user: 'User'
    userId: 'ID'
  }
  PaymentAmount: { // field return type name
    amount: 'Int'
    currency: 'PaymentCurrency'
  }
  PaymentFees: { // field return type name
    amount: 'Int'
    currency: 'PaymentCurrency'
  }
  PaymentSource: { // field return type name
    id: 'ID'
    type: 'PaymentSourceType'
  }
  Payout: { // field return type name
    amount: 'Int'
    circlePayoutId: 'String'
    createdAt: 'Date'
    executed: 'Boolean'
    id: 'ID'
    proposalIds: 'String'
    proposals: 'Proposal'
    security: 'PayoutSecurity'
    status: 'PayoutStatus'
    updatedAt: 'Date'
    voided: 'Boolean'
  }
  PayoutSecurity: { // field return type name
    id: 'Int'
    redeemed: 'Boolean'
    redemptionAttempts: 'Int'
  }
  Proposal: { // field return type name
    common: 'Common'
    commonId: 'ID'
    createdAt: 'Date'
    description: 'ProposalDescription'
    fundingRequest: 'ProposalFunding'
    fundingState: 'ProposalFundingState'
    id: 'ID'
    join: 'ProposalJoin'
    paymentState: 'ProposalPaymentState'
    proposer: 'User'
    proposerId: 'ID'
    state: 'ProposalState'
    type: 'ProposalType'
    updatedAt: 'Date'
    votes: 'ProposalVote'
    votesAgainst: 'Int'
    votesFor: 'Int'
  }
  ProposalDescription: { // field return type name
    description: 'String'
    title: 'String'
  }
  ProposalFunding: { // field return type name
    amount: 'Int'
  }
  ProposalJoin: { // field return type name
    cardId: 'ID'
    funding: 'Int'
    fundingType: 'CommonContributionType'
  }
  ProposalVote: { // field return type name
    outcome: 'ProposalVoteOutcome'
    voteId: 'ID'
    voter: 'User'
    voterId: 'ID'
  }
  Query: { // field return type name
    common: 'Common'
    commons: 'Common'
    event: 'Event'
    events: 'Event'
    payment: 'Payment'
    payments: 'Payment'
    payout: 'Payout'
    payouts: 'Payout'
    proposal: 'Proposal'
    proposals: 'Proposal'
    statistics: 'Statistics'
    user: 'User'
    users: 'User'
    wires: 'Wire'
  }
  Statistics: { // field return type name
    commons: 'Int'
    fundingRequests: 'Int'
    joinRequests: 'Int'
    newCommons: 'Int'
    newDiscussionMessages: 'Int'
    newDiscussions: 'Int'
    newFundingRequests: 'Int'
    newJoinRequests: 'Int'
    users: 'Int'
  }
  Subscription: { // field return type name
    amount: 'Int'
    cardId: 'ID'
    charges: 'Int'
    createdAt: 'Date'
    dueDate: 'Date'
    id: 'ID'
    lastChargedAt: 'Date'
    metadata: 'SubscriptionMetadata'
    proposalId: 'ID'
    revoked: 'Boolean'
    status: 'SubscriptionStatus'
    updatedAt: 'Date'
    userId: 'ID'
  }
  SubscriptionMetadata: { // field return type name
    common: 'SubscriptionMetadataCommon'
  }
  SubscriptionMetadataCommon: { // field return type name
    id: 'ID'
    name: 'String'
  }
  User: { // field return type name
    createdAt: 'Date'
    email: 'String'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    permissions: 'String'
    photoURL: 'String'
    proposals: 'Proposal'
    subscriptions: 'Subscription'
    tokens: 'String'
  }
  Wire: { // field return type name
    bank: 'WireBank'
    billingDetails: 'WireBillingDetailsType'
    createdAt: 'Date'
    description: 'String'
    id: 'ID'
    updatedAt: 'Date'
  }
  WireBank: { // field return type name
    bankName: 'String'
    city: 'String'
    country: 'String'
  }
  WireBillingDetailsType: { // field return type name
    city: 'String'
    country: 'String'
    line1: 'String'
    line2: 'String'
    name: 'String'
    postalCode: 'String'
  }
}

export interface NexusGenArgTypes {
  Common: {
    proposals: { // args
      page?: number | null; // Int
      paymentState?: NexusGenEnums['ProposalPaymentState'] | null; // ProposalPaymentState
      state?: NexusGenEnums['ProposalState'] | null; // ProposalState
      type?: NexusGenEnums['ProposalType'] | null; // ProposalType
    }
  }
  Mutation: {
    createIntention: { // args
      input: NexusGenInputs['CreateIntentionInput']; // CreateIntentionInput!
    }
    executePayouts: { // args
      input: NexusGenInputs['ExecutePayoutInput']; // ExecutePayoutInput!
    }
  }
  Query: {
    common: { // args
      commonId: string; // ID!
    }
    commons: { // args
      after?: number | null; // Int
      last: number | null; // Int
    }
    event: { // args
      eventId: string; // ID!
    }
    events: { // args
      after?: number | null; // Int
      last: number | null; // Int
      objectId?: string | null; // ID
      type?: NexusGenEnums['EventType'] | null; // EventType
    }
    payment: { // args
      id: string; // ID!
    }
    payments: { // args
      hanging?: boolean | null; // Boolean
      page: number | null; // Int
    }
    payout: { // args
      id: string; // ID!
    }
    payouts: { // args
      page: number | null; // Int
    }
    proposal: { // args
      id: string; // ID!
    }
    proposals: { // args
      fundingState?: NexusGenEnums['ProposalFundingState'] | null; // ProposalFundingState
      ids?: Array<string | null> | null; // [String]
      page: number | null; // Int
      pageItems: number | null; // Int
      type?: NexusGenEnums['ProposalType'] | null; // ProposalType
    }
    user: { // args
      id: string; // ID!
    }
    users: { // args
      page: number | null; // Int
      perPage: number | null; // Int
    }
    wires: { // args
      page: number | null; // Int
    }
  }
  Statistics: {
    fundingRequests: { // args
      onlyOpen?: boolean | null; // Boolean
    }
    joinRequests: { // args
      onlyOpen?: boolean | null; // Boolean
    }
  }
  User: {
    proposals: { // args
      page: number | null; // Int
    }
    subscriptions: { // args
      page: number | null; // Int
      status?: NexusGenEnums['SubscriptionStatus'] | null; // SubscriptionStatus
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: IRequestContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}