/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { IRequestContext } from "./../context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateCommonInput: { // input type
    fundingCooldown: NexusGenScalars['Date']; // Date!
    fundingMinimumAmount: number; // Int!
    fundingType: NexusGenEnums['CommonFundingType']; // CommonFundingType!
    name: string; // String!
  }
  CreateUserInput: { // input type
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
  }
}

export interface NexusGenEnums {
  CommonFundingType: "Monthly" | "OneTime"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  Common: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    whitelisted: boolean; // Boolean!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    authId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Common: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    whitelisted: boolean; // Boolean!
  }
  Mutation: { // field return type
    createCommon: NexusGenRootTypes['Common']; // Common!
    createUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    generateUserAuthToken: string; // String!
  }
  User: { // field return type
    authId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    displayName: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenFieldTypeNames {
  Common: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    name: 'String'
    updatedAt: 'Date'
    whitelisted: 'Boolean'
  }
  Mutation: { // field return type name
    createCommon: 'Common'
    createUser: 'User'
  }
  Query: { // field return type name
    generateUserAuthToken: 'String'
  }
  User: { // field return type name
    authId: 'ID'
    createdAt: 'Date'
    displayName: 'String'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    updatedAt: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCommon: { // args
      input: NexusGenInputs['CreateCommonInput']; // CreateCommonInput!
    }
    createUser: { // args
      input: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
  }
  Query: {
    generateUserAuthToken: { // args
      authId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: IRequestContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}