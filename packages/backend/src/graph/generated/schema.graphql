### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BillingDetailsInput {
  city: String!
  country: String!
  district: String
  line1: String!
  line2: String
  name: String!
  postalCode: String!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Card {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

input CardBillingDetailsWhereInput {
  AND: [CardBillingDetailsWhereInput!]
  NOT: [CardBillingDetailsWhereInput!]
  OR: [CardBillingDetailsWhereInput!]
  card: CardWhereInput
  cardId: StringFilter
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  district: StringNullableFilter
  id: StringFilter
  line1: StringFilter
  line2: StringNullableFilter
  name: StringFilter
  postalCode: StringFilter
  updatedAt: DateTimeFilter
}

input CardListRelationFilter {
  every: CardWhereInput
  none: CardWhereInput
  some: CardWhereInput
}

enum CardNetwork {
  MASTERCARD
  VISA
}

input CardWhereInput {
  AND: [CardWhereInput!]
  NOT: [CardWhereInput!]
  OR: [CardWhereInput!]
  avsCheck: StringFilter
  billingDetails: CardBillingDetailsWhereInput
  circleCardId: StringFilter
  createdAt: DateTimeFilter
  cvvCheck: StringFilter
  digits: StringFilter
  id: StringFilter
  network: EnumCardNetworkFilter
  payments: PaymentListRelationFilter
  subscriptions: SubscriptionListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type Common {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!

  """The name of the common as provided"""
  name: String!

  """The date, at which the item was last modified"""
  updatedAt: Date!

  """The whitelisting state of a common"""
  whitelisted: Boolean!
}

input CommonMemberListRelationFilter {
  every: CommonMemberWhereInput
  none: CommonMemberWhereInput
  some: CommonMemberWhereInput
}

enum CommonMemberRole {
  Founder
}

input CommonMemberWhereInput {
  AND: [CommonMemberWhereInput!]
  NOT: [CommonMemberWhereInput!]
  OR: [CommonMemberWhereInput!]
  common: CommonWhereInput
  commonId: StringFilter
  createdAt: DateTimeFilter
  fundingProposals: FundingProposalListRelationFilter
  id: StringFilter
  payments: PaymentListRelationFilter
  roles: EnumCommonMemberRoleNullableListFilter
  subscription: SubscriptionWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input CommonWhereInput {
  AND: [CommonWhereInput!]
  NOT: [CommonWhereInput!]
  OR: [CommonWhereInput!]
  balance: IntFilter
  createdAt: DateTimeFilter
  events: EventListRelationFilter
  fundingCooldown: DateTimeFilter
  fundingMinimumAmount: IntFilter
  fundingProposals: FundingProposalListRelationFilter
  fundingType: EnumFundingTypeFilter
  id: StringFilter
  joinProposals: JoinProposalListRelationFilter
  members: CommonMemberListRelationFilter
  name: StringFilter
  payments: PaymentListRelationFilter
  raised: IntFilter
  subscriptions: SubscriptionListRelationFilter
  updatedAt: DateTimeFilter
  whitelisted: BoolFilter
}

input CommonWhereUniqueInput {
  id: String
}

input CreateCardInput {
  billingDetails: BillingDetailsInput!

  """The sensitive part of the card as encrypted card"""
  encryptedData: String!
  expMonth: Int!
  expYear: Int!

  """The ID of the key used for the encryption of the sensitive data"""
  keyId: String!
}

input CreateCommonInput {
  fundingCooldown: Date!
  fundingMinimumAmount: Int!
  fundingType: FundingType!
  name: String!
}

input CreateFundingProposalInput {
  amount: Int!
  commonId: ID!
  description: String!
  files: [ProposalFileInput!]
  images: [ProposalImageInput!]
  links: [ProposalLinkInput!]
  title: String!
}

input CreateJoinProposalInput {
  cardId: String!
  commonId: String!
  description: String!
  fundingAmount: Int!
  links: [LinkInput!]
  title: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

scalar Date

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumCardNetworkFilter {
  equals: CardNetwork
  in: [CardNetwork!]
  not: NestedEnumCardNetworkFilter
  notIn: [CardNetwork!]
}

input EnumCommonMemberRoleNullableListFilter {
  equals: [CommonMemberRole!]
  has: CommonMemberRole
  hasEvery: [CommonMemberRole!]
  hasSome: [CommonMemberRole!]
  isEmpty: Boolean
}

input EnumEventTypeFilter {
  equals: EventType
  in: [EventType!]
  not: NestedEnumEventTypeFilter
  notIn: [EventType!]
}

input EnumFundingTypeFilter {
  equals: FundingType
  in: [FundingType!]
  not: NestedEnumFundingTypeFilter
  notIn: [FundingType!]
}

input EnumProposalPaymentStateFilter {
  equals: ProposalPaymentState
  in: [ProposalPaymentState!]
  not: NestedEnumProposalPaymentStateFilter
  notIn: [ProposalPaymentState!]
}

input EnumProposalStateFilter {
  equals: ProposalState
  in: [ProposalState!]
  not: NestedEnumProposalStateFilter
  notIn: [ProposalState!]
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

enum EventType {
  CardCreated
  CardCvvVerificationFailed
  CardCvvVerificationPassed
  CommonCreated
  CommonMemberCreated
  CommonMemberRoleAdded
  CommonMemberRoleRemoved
  FundingRequestCreated
  JoinRequestCreated
  UserCreated
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  common: CommonWhereInput
  commonId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  payload: JsonNullableFilter
  type: EnumEventTypeFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

type FundingProposal {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

input FundingProposalListRelationFilter {
  every: FundingProposalWhereInput
  none: FundingProposalWhereInput
  some: FundingProposalWhereInput
}

input FundingProposalWhereInput {
  AND: [FundingProposalWhereInput!]
  NOT: [FundingProposalWhereInput!]
  OR: [FundingProposalWhereInput!]
  amount: IntFilter
  common: CommonWhereInput
  commonId: StringFilter
  commonMember: CommonMemberWhereInput
  commonMemberId: StringFilter
  createdAt: DateTimeFilter
  description: ProposalDescriptionWhereInput
  funded: BoolFilter
  id: StringFilter
  state: EnumProposalStateFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

"""The funding type of the common"""
enum FundingType {
  Monthly
  OneTime
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type JoinProposal {
  """The date, at which the item was created"""
  createdAt: Date!

  """The main identifier of the item"""
  id: ID!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

input JoinProposalListRelationFilter {
  every: JoinProposalWhereInput
  none: JoinProposalWhereInput
  some: JoinProposalWhereInput
}

input JoinProposalWhereInput {
  AND: [JoinProposalWhereInput!]
  NOT: [JoinProposalWhereInput!]
  OR: [JoinProposalWhereInput!]
  common: CommonWhereInput
  commonId: StringFilter
  createdAt: DateTimeFilter
  description: ProposalDescriptionWhereInput
  funding: IntFilter
  fundingType: EnumFundingTypeFilter
  id: StringFilter
  payment: PaymentWhereInput
  paymentState: EnumProposalPaymentStateFilter
  state: EnumProposalStateFilter
  subscription: SubscriptionWhereInput
  subscriptionId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

scalar Json

input JsonNullableFilter {
  equals: Json
  not: Json
}

type Link {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

input LinkInput {
  """The display title of the link"""
  title: String!

  """The actual link part of the link"""
  url: String!
}

type Mutation {
  createCard(input: CreateCardInput!): Card!
  createCommon(input: CreateCommonInput!): Common!
  createFundingProposal(input: CreateFundingProposalInput!): FundingProposal!

  """Create new proposal of type JOIN."""
  createJoinProposal(input: CreateJoinProposalInput!): JoinProposal!

  """Creates new user in the system"""
  createUser(input: CreateUserInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumCardNetworkFilter {
  equals: CardNetwork
  in: [CardNetwork!]
  not: NestedEnumCardNetworkFilter
  notIn: [CardNetwork!]
}

input NestedEnumEventTypeFilter {
  equals: EventType
  in: [EventType!]
  not: NestedEnumEventTypeFilter
  notIn: [EventType!]
}

input NestedEnumFundingTypeFilter {
  equals: FundingType
  in: [FundingType!]
  not: NestedEnumFundingTypeFilter
  notIn: [FundingType!]
}

input NestedEnumProposalPaymentStateFilter {
  equals: ProposalPaymentState
  in: [ProposalPaymentState!]
  not: NestedEnumProposalPaymentStateFilter
  notIn: [ProposalPaymentState!]
}

input NestedEnumProposalStateFilter {
  equals: ProposalState
  in: [ProposalState!]
  not: NestedEnumProposalStateFilter
  notIn: [ProposalState!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input PaymentListRelationFilter {
  every: PaymentWhereInput
  none: PaymentWhereInput
  some: PaymentWhereInput
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  card: CardWhereInput
  cardId: StringFilter
  common: CommonWhereInput
  commonId: StringFilter
  commonMember: CommonMemberWhereInput
  commonMemberId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  proposal: JoinProposalWhereInput
  proposalId: StringFilter
  subscription: SubscriptionWhereInput
  subscriptionId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ProposalDescriptionWhereInput {
  AND: [ProposalDescriptionWhereInput!]
  NOT: [ProposalDescriptionWhereInput!]
  OR: [ProposalDescriptionWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  files: JsonNullableFilter
  funding: FundingProposalWhereInput
  fundingId: StringNullableFilter
  id: StringFilter
  images: JsonNullableFilter
  join: JoinProposalWhereInput
  joinId: StringNullableFilter
  link: JsonNullableFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ProposalFileInput {
  value: String!
}

input ProposalImageInput {
  value: String!
}

input ProposalLinkInput {
  title: String!
  url: String!
}

enum ProposalPaymentState {
  NotAttempted
  Pending
  Successful
  Unsuccessful
}

enum ProposalState {
  Accepted
  Countdown
  Rejected
}

type Query {
  common(where: CommonWhereUniqueInput!): Common
  commons(after: CommonWhereUniqueInput, before: CommonWhereUniqueInput, first: Int, last: Int, where: CommonWhereInput): [Common!]!
  generateUserAuthToken(authId: String!): String!
}

enum QueryMode {
  default
  insensitive
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input SubscriptionListRelationFilter {
  every: SubscriptionWhereInput
  none: SubscriptionWhereInput
  some: SubscriptionWhereInput
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  card: CardWhereInput
  cardId: StringFilter
  common: CommonWhereInput
  commonId: StringFilter
  commonMember: CommonMemberWhereInput
  commonMemberId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  payments: PaymentListRelationFilter
  proposal: JoinProposalListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type User {
  """The date, at which the item was created"""
  createdAt: Date!

  """The display name of the user"""
  displayName: String!

  """The first name of the user"""
  firstName: String!

  """The system Id of the user"""
  id: ID!

  """The last name of the user"""
  lastName: String!

  """The date, at which the item was last modified"""
  updatedAt: Date!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  cards: CardListRelationFilter
  commonLinks: CommonMemberListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: BoolFilter
  events: EventListRelationFilter
  firstName: StringFilter
  fundingProposals: FundingProposalListRelationFilter
  id: StringFilter
  joinProposals: JoinProposalListRelationFilter
  lastName: StringFilter
  payments: PaymentListRelationFilter
  subscriptions: SubscriptionListRelationFilter
  updatedAt: DateTimeFilter
}
