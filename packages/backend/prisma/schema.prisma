// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("Database.Url")
}

generator client {
  provider = "prisma-client-js"
}

// ---- Shared

enum FundingType {
  OneTime
  Monthly
}

// ---- User related stuff

model User {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName  String

  email         String  @unique
  emailVerified Boolean @default(false)

  cards       Card[]
  events      Event[]
  commonLinks CommonMember[]

  payments      Payment[]
  subscriptions Subscription[]

  joinProposals    JoinProposal[]
  fundingProposals FundingProposal[]
}

// ---- Common related stuff

model Common {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  balance Int @default(0)
  raised  Int @default(0)

  whitelisted Boolean @default(false)

  fundingType          FundingType
  fundingCooldown      DateTime
  fundingMinimumAmount Int

  events  Event[]
  members CommonMember[]

  payments      Payment[]
  subscriptions Subscription[]

  joinProposals    JoinProposal[]
  fundingProposals FundingProposal[]
}

model CommonMember {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  common Common @relation(fields: [commonId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  roles CommonMemberRole[]

  payments     Payment[]
  subscription Subscription?

  fundingProposals FundingProposal[]

  commonId String
  userId   String

  Vote Vote[]

  @@unique([userId, commonId])
}

enum CommonMemberRole {
  Founder
}

// ---- Proposals

model JoinProposal {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  funding     Int
  fundingType FundingType

  state        ProposalState
  paymentState ProposalPaymentState

  description ProposalDescription?

  user   User   @relation(fields: [userId], references: [id])
  common Common @relation(fields: [commonId], references: [id])

  payment      Payment?
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  userId         String
  commonId       String
  subscriptionId String?
}

model FundingProposal {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  common       Common       @relation(fields: [commonId], references: [id])
  commonMember CommonMember @relation(fields: [commonMemberId], references: [id])

  description ProposalDescription?

  state ProposalState

  amount Int

  funded Boolean @default(false)

  userId         String
  commonId       String
  commonMemberId String
}

model ProposalDescription {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String?
  description String?

  link   Json?
  files  Json?
  images Json?

  votes Vote[]

  votesFor     Int @default(0)
  votesAgainst Int @default(0)

  join    JoinProposal?    @relation(fields: [joinId], references: [id])
  funding FundingProposal? @relation(fields: [fundingId], references: [id])


  joinId    String? @unique
  fundingId String? @unique
}

enum ProposalState {
  Countdown

  Rejected
  Accepted
}

enum ProposalPaymentState {
  NotAttempted
  Pending

  Successful
  Unsuccessful
}

// ---- Subscriptions
model Subscription {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card Card @relation(fields: [cardId], references: [id])

  user         User         @relation(fields: [userId], references: [id])
  common       Common       @relation(fields: [commonId], references: [id])
  commonMember CommonMember @relation(fields: [commonMemberId], references: [id])

  proposal JoinProposal[]
  payments Payment[]


  cardId String

  userId         String
  commonId       String
  commonMemberId String
}

// ---- Votes

model Vote {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  outcome VoteOutcome

  proposal     ProposalDescription @relation(fields: [proposalDescriptionId], references: [id])
  commonMember CommonMember        @relation(fields: [commonMemberId], references: [id])

  commonMemberId        String
  proposalDescriptionId String

  @@unique([commonMemberId, proposalDescriptionId])
}

enum VoteOutcome {
  Approve
  Condemn
}

// ---- Payments and cards

model Payment {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card Card @relation(fields: [cardId], references: [id])

  user         User         @relation(fields: [userId], references: [id])
  common       Common       @relation(fields: [commonId], references: [id])
  commonMember CommonMember @relation(fields: [commonMemberId], references: [id])

  proposal     JoinProposal  @relation(fields: [proposalId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  subscriptionId String?
  proposalId     String

  userId         String
  commonId       String
  commonMemberId String

  cardId String
}

model Card {
  id String @id @default(uuid())

  circleCardId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  digits  String
  network CardNetwork

  cvvCheck String
  avsCheck String

  user          User           @relation(fields: [userId], references: [id])
  payments      Payment[]
  subscriptions Subscription[]

  billingDetails CardBillingDetails?

  userId String
}

enum CardNetwork {
  VISA
  MASTERCARD
}

model CardBillingDetails {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  line1 String
  line2 String?

  city       String
  country    String
  district   String?
  postalCode String

  card Card @relation(fields: [cardId], references: [id])

  cardId String
}

// ---- Events

model Event {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type EventType

  payload Json?

  commonId String?
  userId   String?

  common Common? @relation(fields: [commonId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])
}

enum EventType {
  CommonCreated

  CommonMemberCreated
  CommonMemberRoleAdded
  CommonMemberRoleRemoved

  JoinRequestCreated

  FundingRequestCreated

  CardCreated
  CardCvvVerificationPassed
  CardCvvVerificationFailed

  VoteCreated

  UserCreated
}
